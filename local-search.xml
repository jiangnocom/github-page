<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>51单片机定时器初步学习</title>
    <link href="/2024/09/03/24_9_3_timer/"/>
    <url>/2024/09/03/24_9_3_timer/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机定时器"><a href="#51单片机定时器" class="headerlink" title="51单片机定时器"></a>51单片机定时器</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>  定时器属于内部资源，其电路与运转都在单片机内部。（也是一种计数器）</p><h3 id="1-2定时器作用"><a href="#1-2定时器作用" class="headerlink" title="1.2定时器作用"></a>1.2定时器作用</h3><ul><li>用于计时系统，软件计时，以及隔一段时间完成一项操作。</li><li>替代长时间的Delay。</li><li>多个任务同时执行，提高CPU的运行效率和处理速度。</li></ul><h2 id="2-STC89C52的定时器资源"><a href="#2-STC89C52的定时器资源" class="headerlink" title="2.STC89C52的定时器资源"></a>2.STC89C52的定时器资源</h2><ul><li>数量：3个（其他定时器不一定为此数量）</li></ul><h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3.原理"></a>3.原理</h2><p>根据时钟信号，经过一段时间来对寄存器操作（加一），我们通过中断来设定何时进行什么任务。</p><h2 id="4-定时器的工作模式"><a href="#4-定时器的工作模式" class="headerlink" title="4.定时器的工作模式"></a>4.定时器的工作模式</h2><ul><li>模式0：13位定时器&#x2F;计数器（少用）</li><li>模式1：16位定时器&#x2F;计数器（常用）</li><li>模式2：8位自动重装模式（少用）</li><li>模式3：两个8位计数器</li></ul><p><strong>以下只讲解模式1</strong></p><p>定时器分为3个部分：</p><ul><li>时钟</li><li>计数器</li><li>中断</li></ul><h3 id="4-1如何计数？"><a href="#4-1如何计数？" class="headerlink" title="4.1如何计数？"></a>4.1如何计数？</h3><p>模式一中计数器由两个8位寄存器组成（最大数即为65535），时钟信号每一个脉冲加1，当加到65535（准确说是65536）时溢出，变为0（此时将申请中断）。</p><h3 id="4-2时钟"><a href="#4-2时钟" class="headerlink" title="4.2时钟"></a>4.2时钟</h3><p>本开发板的晶振为11.0592MHz，但是时钟信号可以由外部引脚（如T0），此时可以作为计数器（一个脉冲+1），若由芯片内部时钟，此时即为计数器。</p><p>时钟信号进入单片机之后，会进行分频（除以12或是除以6？，如果是12Mhz除以12，那么一个周期就是1us）</p><h3 id="4-3中断系统"><a href="#4-3中断系统" class="headerlink" title="4.3中断系统"></a>4.3中断系统</h3><ul><li>中断系统是为cpu具有紧急事件的实时处理能力而设置的。</li><li>当cpu在执行任务时有紧急任务需要处理时，cpu可以暂停转而去处理这个紧急事件，然后再返回到原来被中断的地方，这就是中断系统。</li><li>cpu可以有多个中断源，我们可以为不同中断源设置优先级，cpu总是会首先处理优先级最高的任务（若已经在优先级较低的中断处理中，会停止处理，转而优先级高的中断源（即中断嵌套）。）</li></ul><h4 id="中断系统的资源"><a href="#中断系统的资源" class="headerlink" title="中断系统的资源"></a>中断系统的资源</h4><p>不同系统具有不同的中断资源如：中断源个数不同、中断源优先级不同等。</p><p>89C52单片机中断资源如下：</p><ul><li>中断源个数：8个</li><li>中断优先级个数：4个</li><li>中断号如下表<table><thead><tr><th align="center">序号</th><th>中断源</th></tr></thead><tbody><tr><td align="center">0</td><td>外部中断0</td></tr><tr><td align="center">1</td><td>定时器0</td></tr><tr><td align="center">2</td><td>外部中断1</td></tr><tr><td align="center">3</td><td>定时器1</td></tr><tr><td align="center">4</td><td>串口中断</td></tr><tr><td align="center">5</td><td>定时器2</td></tr><tr><td align="center">6</td><td>外部中断2</td></tr><tr><td align="center">7</td><td>外部中断3</td></tr></tbody></table></li></ul><p>中断函数写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Int0_Routine</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> interrupt 0;<br></code></pre></td></tr></table></figure><p>中断优先级，查看手册，或者以此图为参考（51单片机向下兼容，此图也计时器与中断系统的结合）</p><p><img src="https://s3.bmp.ovh/imgs/2024/09/03/025f4f5d25e7b445.png"></p><h2 id="5-配置"><a href="#5-配置" class="headerlink" title="5.配置"></a>5.配置</h2><p>了解完基本原理，剩下的即为配置寄存器。<br>此图为定时器的寄存器<br><img src="https://s3.bmp.ovh/imgs/2024/09/03/e6d8a2becf9799c8.png"></p>]]></content>
    
    
    <categories>
      
      <category>51单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针初步学习</title>
    <link href="/2024/08/25/note/"/>
    <url>/2024/08/25/note/</url>
    
    <content type="html"><![CDATA[<h1 id="指针初步学习"><a href="#指针初步学习" class="headerlink" title="指针初步学习"></a>指针初步学习</h1><h2 id="1-指针是什么？"><a href="#1-指针是什么？" class="headerlink" title="1.指针是什么？"></a>1.指针是什么？</h2><p>电脑内存这么大我们怎么管理？<br>于是我们创造了指针。</p><ul><li>指针是内存最小单位的一个地址</li></ul><p>假设以下一格为一个字节（Byte）<br>类比为房间，如何才能找到每个房间，于是就进行编号。</p><table><thead><tr><th align="right">编号</th><th align="center">内存单元</th></tr></thead><tbody><tr><td align="right">1</td><td align="center"></td></tr><tr><td align="right">2</td><td align="center"></td></tr><tr><td align="right">3</td><td align="center"></td></tr><tr><td align="right">…</td><td align="center">…</td></tr></tbody></table><p>这个编号为内存地址，即为指针。</p><p>假设我们要对<code>int a</code>取地址，<code>int</code>大小为4个字节，C语言就会取出第一个字节的地址。</p><p>如：</p><table><thead><tr><th align="right">编号(本质为二进制但是用16进制展示)</th><th align="center">内存单元</th></tr></thead><tbody><tr><td align="right">0x00dbfd98</td><td align="center">a</td></tr><tr><td align="right">0x00dbfd99</td><td align="center">a</td></tr><tr><td align="right">0x00dbfd9a</td><td align="center">a</td></tr><tr><td align="right">0x00dbfd9b</td><td align="center">a</td></tr></tbody></table><p>此处<code>&amp;a = 0x00dbfd98</code>。</p><p><strong>但是注意</strong>：我们在口头中所说指针一般为C语言的指针变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* pa = &amp;a;<br><span class="hljs-comment">//一般我们在这里就把pa这个指针变量说成指针</span><br><span class="hljs-comment">//本文中我会区分指针与指针变量。</span><br></code></pre></td></tr></table></figure><p>在不同的机器上，指针长度不同，32位即32bit，能管理4GB的内存（二进制：11111111 11111111 11111111 11111111），所以在32位机器上一个指针变量大小为4字节。</p><h2 id="2-指针和指针类型"><a href="#2-指针和指针类型" class="headerlink" title="2.指针和指针类型"></a>2.指针和指针类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>*   pc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">short</span>*  ps = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span>*    pi = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">double</span>* pd = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>这些不同类型的指针变量在32位下都是4个字节,<br>那么为什么要区分这些不同类型的指针呢？</p><h3 id="2-1指针类型的意义"><a href="#2-1指针类型的意义" class="headerlink" title="2.1指针类型的意义"></a>2.1指针类型的意义</h3><p><strong>举例1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">0x11223344</span>;<br><span class="hljs-type">char</span>* pc = (<span class="hljs-type">char</span>*)&amp;a;<br>*pc = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>此时a被修改为了0x11223300。  </p><p>所以指针类型决定了指针在被解引用时访问几个字节，如果是<code>char*</code>在解引用是访问1个字节，导致了例子中的情况。</p><hr><p><strong>举例2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>   a = <span class="hljs-number">0x11223344</span>;<br><br><span class="hljs-type">char</span>* pc = (<span class="hljs-type">char</span>*)&amp;a;<br><span class="hljs-type">int</span>*  pi = &amp;a;<br><br>pc+<span class="hljs-number">1</span>;<span class="hljs-comment">//这里加1会给地址加1个字节</span><br>pi+<span class="hljs-number">1</span>;<span class="hljs-comment">//这里加1会给地址加4个字节</span><br></code></pre></td></tr></table></figure><p>即根据指针变量类型的不同进行地址的操作。</p><hr><p>那么<code>int*</code>与<code>float*</code>可以通用吗？<br>显然不可以，在解引用时对于内存的操作仍是不同的。</p>]]></content>
    
    
    <categories>
      
      <category>c语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好久不见。</title>
    <link href="/2024/08/23/hello-world/"/>
    <url>/2024/08/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s3.bmp.ovh/imgs/2023/01/28/f910bfe1af04d2a8.jpg" alt="星空"></p><h2 id="好久不见！"><a href="#好久不见！" class="headerlink" title="好久不见！"></a>好久不见！</h2><p>回顾一下我的博客历史：</p><h3 id="一阶段"><a href="#一阶段" class="headerlink" title="一阶段"></a>一阶段</h3><p>自第一次创建“博客”来，已过去了4年，至今还记得亲手写下第一个html标签时的心潮澎湃。  </p><p>但我不满足于区区html，便又在网上寻觅，便遇见了wordpress，第一次搭建了php环境，被其强大的交互能力折服，那时还不知道什么前端后端，只知道，wordpress好强大。  </p><p>没有公网主机的我用一台笔记本内网穿透，域名解析，强制让它7x24小时运行（哈哈</p><p>最终还是抵不过运维的压力（滑稽，其实是懒得搞了</p><h3 id="二阶段"><a href="#二阶段" class="headerlink" title="二阶段"></a>二阶段</h3><p>小屁孩终究还是敌不过想要一个自己的网站的欲望，却又想白嫖。我便去找能够使用的免费的服务器（小水管）<br>部署了typecho（简洁好用）。但是，白嫖的总是不稳定，没多久便又挂了。</p><h3 id="现阶段"><a href="#现阶段" class="headerlink" title="现阶段"></a>现阶段</h3><p>现在，我部署了hexo生成静态页面上传至GitHub，作为我第三阶段（或许是最终阶段）博客的开始，同时也是人生的一个新阶段，我想我会尽力记录我的学习经验，毕竟，再怎么漂亮的博客页面，比不上丰硕的博客内容。</p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
