<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>记录一些git命令</title>
    <link href="/2025/07/14/25_7_14_git_operations/"/>
    <url>/2025/07/14/25_7_14_git_operations/</url>
    
    <content type="html"><![CDATA[<h1 id="一.简述">一.简述</h1><p>最近在开发单片机程序的时候一直都使用文件夹来进行程序的版本管理，而且对版本的描述只有在文件夹名上的修改。<imgsrc="https://s3.bmp.ovh/imgs/2025/07/14/86e8e2060ed0143b.webp" /></p><p>这也就导致了每次增加新功能或者是修复bug的时候根本就记不住做了哪些操作，甚至有时会丢失掉一部分代码，这对代码管理是及其不友好的。</p><p>这就要提到一个非常强大的工具就是git。其实我用git用了很久，但是从来没有真正使用到git强大的commit，branch等核心部分，所以从现在开始，我要真正使用到git的核心功能，借此页面对git的命令进行一些记录。</p><h1 id="二.基础操作">二.基础操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git init<br></code></pre></td></tr></table></figure><p>初始化当前文件夹为git仓库</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git add .<br></code></pre></td></tr></table></figure><p>将当前文件夹下所有文件加入git缓冲区等待操作。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git pull<br></code></pre></td></tr></table></figure><p>拉取当前仓库当前分支的最新代码。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git commit -m &quot;commit的描述&quot;<br></code></pre></td></tr></table></figure><p>本地仓库进行commi操作，还没有更新到远程仓库</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git push<br></code></pre></td></tr></table></figure><p>将本地修改更新到远程仓库。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git branch<br></code></pre></td></tr></table></figure><p>查看当前本地仓库的分支。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git checkout &lt;分支名&gt;<br></code></pre></td></tr></table></figure><p>切换仓库的分支备注：如果找不到远程仓库的分支，需要先pull来拉取远程分支。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git rm &lt;文件名&gt;<br></code></pre></td></tr></table></figure><p>在本地仓库进行删除操作。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git mv &lt;旧文件名&gt; &lt;新文件名&gt;<br></code></pre></td></tr></table></figure><p>重命名。</p><hr /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ssh">git commit --amend<br></code></pre></td></tr></table></figure><p>push之后想要修改commit简介。</p><hr /><h1 id="三.我的分支命名规范">三.我的分支命名规范</h1><ul><li>主分支 main主分支，所有提供给用户使用的正式版本，都在这个主分支上发布</li><li>开发分支 feature/dev ①供联调与合作开发 ②不能在dev开发</li><li>功能分支 develop/feature/20250714_uart_driver基于main分支创建的个人功能分支</li><li>测试分支 develop/test 测试分支没有问题 合并到main分支</li><li>修复分支 hotfix/20220708_login_captcha 修复线上代码的bug</li></ul>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令行</tag>
      
      <tag>GIT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高品质音乐播放器（基于STM32F407）</title>
    <link href="/2025/02/27/25_2_27_audioplayer/"/>
    <url>/2025/02/27/25_2_27_audioplayer/</url>
    
    <content type="html"><![CDATA[<p>新年好。</p><h1 id="一.简述">一.简述</h1><p>在学习stm32f4时，我想要做一个项目来充分发挥f4系列的性能，正巧我对音频与UI比较感兴趣，于是我便选定了音乐播放器这个项目。</p><p>首先，我从项目名进行项目特点分析。</p><h2 id="高品质dac解码wav">1.1 高品质（DAC，解码，WAV）</h2><p>自然界中的音频是一种波，音源通过推动空气振动来传递能量，最终人耳鼓膜受迫振动转化为电信号传递给大脑。</p><p>而描述一个波的物理量就是频率与振幅，电脑如果需要存储高品质的音频那就是要确保频率与振幅被完整存储下来，而描述音频文件的存储质量的就是位深与采样频率。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/062464b83a462a82.jpg" /></p><p>这张图中，纵轴的长度（振幅）就由位深确定，横轴的每个单位左边之间的长度（频率）就由采样率决定。</p><p>所以通过采样率与位深就可以确定一个点的坐标，确定了点就可以画线即确定了音频波形。</p><p>那么怎么确保音频采样频率与位深足够呢？</p><p>香农采样定理就指出，采样频率大于原始信号频率的二倍即可，而人耳最大可听频率为20-20000Hz,只要确保采样率大于40000Hz即可。</p><p>而一般音乐的分贝数不会超过90分贝，16bit位深就足以存储98dB（动态范围）的音乐。</p><p>这就是CD级音质的由来 44100Hz 16bit 未压缩音频。</p><p>而WAV格式中直接存储了波形的未压缩原始数据，且无需进行过多解码，既满足音质也降低了对mcu性能的要求。</p><p>于是本项目最终支持48kHz 24bitWAV格式音频的播放，所以称其为高品质。</p><h2 id="播放器显示进度播放切歌">1.2 播放器（显示进度，播放切歌）</h2><p><img src="https://s3.bmp.ovh/imgs/2025/02/25/4d60849221edca27.jpg" />仅仅只能播放音频是远远不够的，还需要与用户交互的界面，</p><p>本项目使用了spi屏幕（lil9341），来显示</p><ul><li>播放列表</li><li>播放操作（暂停，下一首，上一首，音量）</li><li>播放进度（进度条）</li><li>播放信息（采样率 位深 歌曲名（支持中文显示））</li></ul><p>通过实体按钮来操作ui。</p><h2 id="基于stm32f407">1.3 基于STM32F407</h2><ul><li>具有168MHz的Cortex™-M4内核，速度较快，能够满足解码音频与屏幕刷新任务，</li><li>具有DMA和I2S能够快速输出32位的音频数据。</li><li>具有FSMC能够连接外部SRAM满足UI组件以及文件系统的内存需求。</li><li>具有SDIO,能够快速读取SD卡内容获取音频数据</li><li>192kb SRAM</li></ul><h1 id="二.硬件">二.硬件</h1><p>接下来，我根据音频数据的传输方向讲解硬件的构成。</p><h2 id="sd卡">2.1 SD卡</h2><p>首先音频数据存储在SD卡中。</p><p>SD卡具有高容量、速度快和体积小的特点，stm32最快能够以5.4M/s的速度来读取数据，足以满足音频的要求。</p><p>以下是硬件连接。 <imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/59323ecadfc56820.webp" /></p><h2 id="stm32f407">2.2 STM32F407</h2><p>存储在SD卡中的数据被MCU读取出来进行解码操作，再显示再屏幕上，最终通过DMA到达I2S发送到DAC(数模转换器)。</p><h2 id="daces9018或开发板自带的wm8978">2.3DAC（ES9018或开发板自带的WM8978）</h2><p>在此之前的所有数据都是以二进制存储的，若将这些数据直接输出只会得到表示1、0的高低电平，这些离散的数字信号需要被转化为连续的模拟信号才可以。</p><p>这就需要DAC芯片来将数字信号来转化为模拟信号，而在音频领域，MCU与音频DAC的通信就是通过前文提及的I2S协议。<imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/b92653b4bc6b6571.jpg" /></p><p>为了达到音频还原的高品质，就需要低失真，高信噪比，高动态范围，高码率的DAC。</p><p>这里我预留了两个选择即 - WM8978(STM32F407开发板自带) - ES9018K2m</p><h3 id="wm8978">2.3.1 WM8978</h3><p>特性如下： - I2S 最高支持192kHz 24bit - 信噪比98dB - 40mW@16Ω的驱动力- I2C控制 - QFN封装 体积小。 <imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/54590a258f24ab1f.jpg" /></p><p>硬件连接</p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/6405c1e7b2e55304.webp" /></p><p>由于这个芯片已停产，且内置耳机驱动推力一般，信噪比也一般比不过ess公司的es9018，在测试时使用WM8978。</p><h3 id="es9018">2.3.2 es9018</h3><p>ess公司在高端音频DAC的性价比高，音频指标高，被许多公司使用，如oppo。</p><p>特性如下 - I2S 最高支持384kHz 32bit -支持DSD（索尼与飞利浦发明的一种音频格式）输入 - 信噪比127dB -120dB动态范围 - I2C控制 - 差分信号输出（低失真，抗干扰）</p><p>由于其无法直接驱动耳机，所以后面需要耳放电路，这里就使用了以往的项目，ESS9018k2m解码板。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2024/12/20/3c1a7d70e73c6dbe.webp" /></p><h2 id="扬声器">2.4 扬声器</h2><p>扬声器内部本质就是一个线圈+磁铁，线圈通过电流后根据电流大小产生磁场，磁场与磁铁相互作用推动空气，产生震动。</p><p>这里的扬声器直接接在了pwm_audio.</p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/6405c1e7b2e55304.webp" /></p><h2 id="sram">2.5 SRAM</h2><p>虽然stm32f4内存很大，但是UI控件与文件系统需要许多内存，于是我使用了外置SRAMIS62WV51216，具有1MB的内存，足够ui，文件系统以及未来的RTOS使用。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/977af8a8312720cb.webp" /></p><p>在硬件连接上，需要将sram的地址线与数据线与mcu的FSMC相连，这里要注意的是不将数据线与地址线混淆即可</p><h2 id="按键">2.6 按键</h2><p>无需多讲。 <imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/58f400ad2f283ecd.webp" /> ## 2.7SPI显示屏在显示方面，使用了ili9341显示屏，带有触摸模块（暂未使用），分辨率为320x280px，能够满足对文字，按键的显示。</p><p>硬件连接只需提供电源，连接好spi即可。</p><h1 id="三.软件">三.软件</h1><p>由于本项目实时性较高，需要格外注意对音频信号实时输出的把控，注意对音频处理的阻塞。</p><h2 id="外设部分">3.1 外设部分</h2><h3 id="i2s">3.1.1 I2S</h3><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">void</span> <span class="hljs-title function_">I2S2_Init</span><span class="hljs-params">(u16 I2S_Standard,u16 I2S_Mode,u16 I2S_Clock_Polarity,u16 I2S_DataFormat)</span><br> &#123; <br> I2S_InitTypeDef I2S_InitStructure;<br><br>RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);<span class="hljs-comment">//使能SPI2时钟</span><br><br>RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2,ENABLE); <span class="hljs-comment">//复位SPI2</span><br>RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2,DISABLE);<span class="hljs-comment">//结束复位</span><br> <br>I2S_InitStructure.I2S_Mode=I2S_Mode;<span class="hljs-comment">//IIS模式</span><br>I2S_InitStructure.I2S_Standard=I2S_Standard;<span class="hljs-comment">//IIS标准</span><br>I2S_InitStructure.I2S_DataFormat=I2S_DataFormat;<span class="hljs-comment">//IIS数据长度</span><br>I2S_InitStructure.I2S_MCLKOutput=I2S_MCLKOutput_Disable;<span class="hljs-comment">//主时钟输出禁止</span><br>I2S_InitStructure.I2S_AudioFreq=I2S_AudioFreq_Default;<span class="hljs-comment">//IIS频率设置</span><br>I2S_InitStructure.I2S_CPOL=I2S_Clock_Polarity;<span class="hljs-comment">//空闲状态时钟电平</span><br>I2S_Init(SPI2,&amp;I2S_InitStructure);<span class="hljs-comment">//初始化IIS</span><br><br><br>SPI_I2S_DMACmd(SPI2,SPI_I2S_DMAReq_Tx,ENABLE);<span class="hljs-comment">//SPI2 TX DMA请求使能.</span><br> I2S_Cmd(SPI2,ENABLE);<span class="hljs-comment">//SPI2 I2S EN使能.</span><br> &#125;；<br><br></code></pre></td></tr></table></figure></p><p>i2s的DMA <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-type">void</span> <span class="hljs-title function_">I2S2_TX_DMA_Init</span><span class="hljs-params">(u8* buf0,u8 *buf1,u16 num)</span><br> &#123;  <br>NVIC_InitTypeDef   NVIC_InitStructure;<br>DMA_InitTypeDef  DMA_InitStructure;<br><br><br> RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1,ENABLE);<span class="hljs-comment">//DMA1时钟使能 </span><br><br>DMA_DeInit(DMA1_Stream4);<br><span class="hljs-keyword">while</span> (DMA_GetCmdStatus(DMA1_Stream4) != DISABLE)&#123;&#125;<span class="hljs-comment">//等待DMA1_Stream1可配置 </span><br><br> <span class="hljs-comment">/* 配置 DMA Stream */</span><br><br> DMA_InitStructure.DMA_Channel = DMA_Channel_0;  <span class="hljs-comment">//通道0 SPI2_TX通道 </span><br> DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&amp;SPI2-&gt;DR;<span class="hljs-comment">//外设地址为:(u32)&amp;SPI2-&gt;DR</span><br> DMA_InitStructure.DMA_Memory0BaseAddr = (u32)buf0;<span class="hljs-comment">//DMA 存储器0地址</span><br> DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;<span class="hljs-comment">//存储器到外设模式</span><br> DMA_InitStructure.DMA_BufferSize = num;<span class="hljs-comment">//数据传输量 </span><br> DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;<span class="hljs-comment">//外设非增量模式</span><br> DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;<span class="hljs-comment">//存储器增量模式</span><br> DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;<span class="hljs-comment">//外设数据长度:16位</span><br> DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;<span class="hljs-comment">//存储器数据长度：16位 </span><br> DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;<span class="hljs-comment">// 使用循环模式 </span><br> DMA_InitStructure.DMA_Priority = DMA_Priority_High;<span class="hljs-comment">//高优先级</span><br> DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable; <span class="hljs-comment">//不使用FIFO模式        </span><br> DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;<br> DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;<span class="hljs-comment">//外设突发单次传输</span><br> DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;<span class="hljs-comment">//存储器突发单次传输</span><br> DMA_Init(DMA1_Stream4, &amp;DMA_InitStructure);<span class="hljs-comment">//初始化DMA Stream</span><br><br>DMA_DoubleBufferModeConfig(DMA1_Stream4,(u32)buf1,DMA_Memory_0);<span class="hljs-comment">//双缓冲模式配置</span><br><br> DMA_DoubleBufferModeCmd(DMA1_Stream4,ENABLE);<span class="hljs-comment">//双缓冲模式开启</span><br><br> DMA_ITConfig(DMA1_Stream4,DMA_IT_TC,ENABLE);<span class="hljs-comment">//开启传输完成中断</span><br><br>NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream4_IRQn; <br> NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="hljs-number">0x00</span>;<span class="hljs-comment">//抢占优先级0</span><br> NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="hljs-number">0x00</span>;<span class="hljs-comment">//子优先级0</span><br> NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="hljs-comment">//使能外部中断通道</span><br> NVIC_Init(&amp;NVIC_InitStructure);<span class="hljs-comment">//配置</span><br> <br> &#125;  <br></code></pre></td></tr></table></figure></p><h3 id="i2c">3.1.2 I2C</h3><pre><code class="hljs">使用正点原子软件i2c</code></pre><ul><li>KEY</li><li>LCD</li></ul><h3 id="sd">3.1.3 SD</h3><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/febdc15c4432b3cf.webp" />总的来说，初始化时就是对sd卡发命令等待回应，来进行一次一次的判断。在代码层面就是定义结构体，传参调用函数。</p><p>而读取数据就是发出某一个命令后发出地址即可从fifo中遍历出数据。</p><h3 id="fsmcsram">3.1.4 FSMC(SRAM)</h3><pre><code class="hljs"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">FSMC_SRAM_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 初始化GPIO口</span><br>GPIO_InitTypeDef GPIO_InitStructure;<br>FSMC_NORSRAMInitTypeDef FSMC_NORSRAMInitStructure;<br>FSMC_NORSRAMTimingInitTypeDef readWriteTiming;<br><br>RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOF | RCC_AHB1Periph_GPIOG, ENABLE);<br>RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);<br><br>GPIO_InitStructure.GPIO_Pin = (<span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">0</span>) | (<span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">4</span>) | (<span class="hljs-number">0xff</span> &lt;&lt; <span class="hljs-number">8</span>);<br>GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;<br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;<br>GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;<br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;<br>GPIO_Init(GPIOD, &amp;GPIO_InitStructure);<br><br>GPIO_InitStructure.GPIO_Pin = (<span class="hljs-number">3</span> &lt;&lt; <span class="hljs-number">0</span>) | (<span class="hljs-number">0X1FF</span> &lt;&lt; <span class="hljs-number">7</span>); <span class="hljs-comment">// PE0,1,7~15,AF OUT</span><br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;           <span class="hljs-comment">// 复用输出</span><br>GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;         <span class="hljs-comment">// 推挽输出</span><br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;     <span class="hljs-comment">// 100MHz</span><br>GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;           <span class="hljs-comment">// 上拉</span><br>GPIO_Init(GPIOE, &amp;GPIO_InitStructure);                 <span class="hljs-comment">// 初始化</span><br><br>GPIO_InitStructure.GPIO_Pin = (<span class="hljs-number">0X3F</span> &lt;&lt; <span class="hljs-number">0</span>) | (<span class="hljs-number">0XF</span> &lt;&lt; <span class="hljs-number">12</span>); <span class="hljs-comment">// PF0~5,12~15</span><br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;             <span class="hljs-comment">// 复用输出</span><br>GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;           <span class="hljs-comment">// 推挽输出</span><br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;       <span class="hljs-comment">// 100MHz</span><br>GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;             <span class="hljs-comment">// 上拉</span><br>GPIO_Init(GPIOF, &amp;GPIO_InitStructure);                   <span class="hljs-comment">// 初始化</span><br><br>GPIO_InitStructure.GPIO_Pin = (<span class="hljs-number">0X3F</span> &lt;&lt; <span class="hljs-number">0</span>) | GPIO_Pin_10; <span class="hljs-comment">// PG0~5,10</span><br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;             <span class="hljs-comment">// 复用输出</span><br>GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;           <span class="hljs-comment">// 推挽输出</span><br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;       <span class="hljs-comment">// 100MHz</span><br>GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;             <span class="hljs-comment">// 上拉</span><br>GPIO_Init(GPIOG, &amp;GPIO_InitStructure);                   <span class="hljs-comment">// 初始化</span><br><br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);<br><br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource0, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource1, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource7, GPIO_AF_FSMC); <span class="hljs-comment">// PE7,AF12</span><br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource9, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC); <span class="hljs-comment">// PE15,AF12</span><br><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource0, GPIO_AF_FSMC);  <span class="hljs-comment">// PF0,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource1, GPIO_AF_FSMC);  <span class="hljs-comment">// PF1,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource2, GPIO_AF_FSMC);  <span class="hljs-comment">// PF2,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource3, GPIO_AF_FSMC);  <span class="hljs-comment">// PF3,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource4, GPIO_AF_FSMC);  <span class="hljs-comment">// PF4,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource5, GPIO_AF_FSMC);  <span class="hljs-comment">// PF5,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource12, GPIO_AF_FSMC); <span class="hljs-comment">// PF12,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource13, GPIO_AF_FSMC); <span class="hljs-comment">// PF13,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource14, GPIO_AF_FSMC); <span class="hljs-comment">// PF14,AF12</span><br>GPIO_PinAFConfig(GPIOF, GPIO_PinSource15, GPIO_AF_FSMC); <span class="hljs-comment">// PF15,AF12</span><br><br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource0, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource1, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource2, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource3, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource4, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource5, GPIO_AF_FSMC);<br>GPIO_PinAFConfig(GPIOG, GPIO_PinSource10, GPIO_AF_FSMC);<br><br>readWriteTiming.FSMC_AccessMode = FSMC_AccessMode_A;<br>readWriteTiming.FSMC_AddressHoldTime = <span class="hljs-number">0x00</span>;<br>readWriteTiming.FSMC_AddressSetupTime = <span class="hljs-number">0x00</span>;<br>readWriteTiming.FSMC_BusTurnAroundDuration = <span class="hljs-number">0x00</span>;<br>readWriteTiming.FSMC_CLKDivision = <span class="hljs-number">0x00</span>;<br>readWriteTiming.FSMC_DataLatency = <span class="hljs-number">0x00</span>;<br>readWriteTiming.FSMC_DataSetupTime = <span class="hljs-number">0x08</span>;<br><br>FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;<br>FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;<br>FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;<br>FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;<br>FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;<br>FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;<br>FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;<br>FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &amp;readWriteTiming;<br>FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignalPolarity_Low;<br>FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;<br>FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_High;<br>FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;<br>FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;<br>FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;<br>FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &amp;readWriteTiming;<br><br>FSMC_NORSRAMInit(&amp;FSMC_NORSRAMInitStructure); <span class="hljs-comment">// 初始化FSMC配置</span><br><br>FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE); <span class="hljs-comment">// 使能BANK1区域3</span><br>&#125;<br><br>以上配置就可以让标准库自动连接SRAM并且映射到<span class="hljs-number">0x6800000</span>开始的，即FSMC_Bank1_NORSRAM3的地址。<br></code></pre></td></tr></table></figure></code></pre><h3 id="wm8978-1">3.1.5 WM8978</h3><pre><code class="hljs">只需要配置好gpio，i2c后按照手册发送命令。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">   IIC_Init();<span class="hljs-comment">//初始化IIC接口</span><br>res=WM8978_Write_Reg(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//软复位WM8978</span><br><span class="hljs-keyword">if</span>(res)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//发送指令失败,WM8978异常</span><br><span class="hljs-comment">//以下为通用设置</span><br>WM8978_Write_Reg(<span class="hljs-number">1</span>,<span class="hljs-number">0X1B</span>);<span class="hljs-comment">//R1,MICEN设置为1(MIC使能),BIASEN设置为1(模拟器工作),VMIDSEL[1:0]设置为:11(5K)</span><br>WM8978_Write_Reg(<span class="hljs-number">2</span>,<span class="hljs-number">0X1B0</span>);<span class="hljs-comment">//R2,ROUT1,LOUT1输出使能(耳机可以工作),BOOSTENR,BOOSTENL使能</span><br>WM8978_Write_Reg(<span class="hljs-number">3</span>,<span class="hljs-number">0X6C</span>);<span class="hljs-comment">//R3,LOUT2,ROUT2输出使能(喇叭工作),RMIX,LMIX使能</span><br>WM8978_Write_Reg(<span class="hljs-number">6</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//R6,MCLK由外部提供</span><br>WM8978_Write_Reg(<span class="hljs-number">43</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">4</span>);<span class="hljs-comment">//R43,INVROUT2反向,驱动喇叭</span><br>   <span class="hljs-comment">//以下为mic配置</span><br>WM8978_Write_Reg(<span class="hljs-number">47</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>);<span class="hljs-comment">//R47设置,PGABOOSTL,左通道MIC获得20倍增益</span><br>WM8978_Write_Reg(<span class="hljs-number">48</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>);<span class="hljs-comment">//R48设置,PGABOOSTR,右通道MIC获得20倍增益</span><br>WM8978_Write_Reg(<span class="hljs-number">49</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">1</span>);<span class="hljs-comment">//R49,TSDEN,开启过热保护 </span><br>WM8978_Write_Reg(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">3</span>);<span class="hljs-comment">//R10,SOFTMUTE关闭,128x采样,最佳SNR </span><br>WM8978_Write_Reg(<span class="hljs-number">14</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">3</span>);<span class="hljs-comment">//R14,ADC 128x采样率</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure></code></pre><!-- ### 3.1.6 UART --><h2 id="文件部分">3.2 文件部分</h2><ul><li><p>FATFS为了管理像sd卡这种大容量存储，若直接存储二进制就无法保证文件的快速访问，文件的安全性。所以在这种存储中通常会以一定格式来存储这些文件的数据，常有的就有NTFS（windows）,fat,exfat,hfs(苹果)。在SD卡中常用fat格式，而为了解码读取出fat文件格式中的文件数据，在mcu中我们就用FATFS来读取，写入fat文件格式。</p><p><strong><em>FATFS是一个免费开源的FAT文件系统模块，专门为小型的嵌入式系统而设计。完全用标准C语言编写，所以具有良好的硬件平台独立性。可以移植到8051、PIC、AVR、SH、Z80、H8、ARM等系列单片机上而只需做简单的修改。它支持FATl2、FATl6和FAT32，支持多个存储媒介；有独立的缓冲区，可以对多个文件进行读／写，并特别对8位单片机和16 位单片机做了优化。</em></strong></p></li></ul><p>在这个项目中只需要引入三个头文件并且在fatfs中定义好sd卡读取写入函数和malloc函数即可<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ff.h&quot;</span><span class="hljs-comment">//fatfs库本体</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;exfuns.h&quot;</span><span class="hljs-comment">//判断文件类型</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;fattester.h&quot;</span><span class="hljs-comment">//封装了一些文件读取，目录访问的函数</span></span><br></code></pre></td></tr></table></figure></p><ul><li>MALLOC由于stm32f407内存大且使用了外部sram,如此大的内存就需要合理的管理，本项目实现了一个malloc。</li></ul><p>这个malloc将内存平分为一块一块，这里将每32字节分为一块每块对应内存管理表中的一项这个表就可以当作一个数组，每次malloc时z只需要访问数组找到空的元素，计算出空内存块的地址即可。若释放内存就操作数组重置元素即可。</p><table><tbody><tr><td>块1</td><td>未占用</td></tr><tr><td>块2</td><td>未占用</td></tr><tr><td>块3</td><td>未占用</td></tr><tr><td>块4</td><td>占用</td></tr></tbody></table><p>这里只演示外部sram</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//mem2内存参数设定.mem2的内存池处于外部SRAM里面</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM2_BLOCK_SIZE32    <span class="hljs-comment">//内存块大小为32字节</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM2_MAX_SIZE1024 *1024  <span class="hljs-comment">//最大管理内存1M</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MEM2_ALLOC_TABLE_SIZEMEM2_MAX_SIZE/MEM2_BLOCK_SIZE <span class="hljs-comment">//内存表大小</span></span><br><br><span class="hljs-comment">// 内存池 </span><br>__align(<span class="hljs-number">32</span>) u8 mem2base[MEM2_MAX_SIZE] __attribute__((at(<span class="hljs-number">0X68000000</span>)));<br><span class="hljs-comment">// 内存管理表</span><br>u16 mem2mapbase[MEM2_ALLOC_TABLE_SIZE] __attribute__((at(<span class="hljs-number">0X68000000</span> + MEM2_MAX_SIZE)));<br><span class="hljs-comment">// 内存管理参数</span><br><span class="hljs-type">const</span> u32 memblksize[SRAMBANK] = &#123;MEM1_BLOCK_SIZE, MEM2_BLOCK_SIZE, MEM3_BLOCK_SIZE&#125;;<br><br><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////////////////////////</span><br><br><br>u32 <span class="hljs-title function_">my_mem_malloc</span><span class="hljs-params">(u8 memx, u32 size)</span><br>&#123;<br>    <span class="hljs-type">signed</span> <span class="hljs-type">long</span> offset = <span class="hljs-number">0</span>;<br>    u32 nmemb;     <span class="hljs-comment">// 需要的内存块数</span><br>    u32 cmemb = <span class="hljs-number">0</span>; <span class="hljs-comment">// 连续空内存数</span><br>    u32 i;<br>    <span class="hljs-keyword">if</span> (!malloc_dev.memrdy[memx])<br>        malloc_dev.init(memx);<br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0xFFFFFFFF</span>; <span class="hljs-comment">// 不需要分配</span><br>    nmemb = size / memblksize[memx];<br>    <span class="hljs-keyword">if</span> (size % memblksize[memx])<br>        nmemb++;<br>    <span class="hljs-keyword">for</span> (offset = memtblsize[memx] - <span class="hljs-number">1</span>; offset &gt;= <span class="hljs-number">0</span>; offset--)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!malloc_dev.memmap[memx][offset])<br>            cmemb++;<br>        <span class="hljs-keyword">else</span><br>            cmemb = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (cmemb == nmemb)<br>        &#123;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nmemb; i++)<br>            &#123;<br>                malloc_dev.memmap[memx][offset + i] = nmemb;<br>            &#125;<br>            <span class="hljs-keyword">return</span> (offset * memblksize[memx]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0xFFFFFFFF</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="显示部分">3.3 显示部分</h2><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/5fd8cf72546e7785.webp" /></p><h3 id="tft屏">3.3.1 tft屏</h3><p>调用spi,操作spi发送指令。</p><h3 id="lvgl">3.3.2 LVGL</h3><p>LVGL是一个开源的轻量级图形库，内置了许多控件，任务管理系统。移植的时候需要给定屏幕的画点函数。（在lvgl库目录下的porting/lv_port_disp.c）</p><p>由于lvgl内置了任务系统，所以需要心跳来让lvgld对任务进行时间分配，这里直接放入main函数的while循环即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lvgl.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gui_guider.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;events_init.h&quot;</span></span><br> <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    lv_tick_inc(<span class="hljs-number">1</span>);    <span class="hljs-comment">// tick单位是ms，设置为5ms即可，一般只要有值就行。</span><br>    lv_task_handler(); <span class="hljs-comment">// 这个比较重要，从名字就能知道他是用来运行lvgl的task的</span><br> &#125;<br></code></pre></td></tr></table></figure><h3 id="gui-guider">3.3.3 GUI-GUIDER</h3><p>GUIGuider是恩智浦提供的用户友好型图形用户界面开发工具，通俗讲就是只需要拖拽操作就可以创建出页面，能够快速画出页面<img src="https://s3.bmp.ovh/imgs/2025/02/25/d19560c3bf6e99eb.webp" />画完页面只需要导出代码，加入项目目录、引用头文件就可以创建页面。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/60d90ccb5c0f85b1.webp" /></p><p>以上是导出的gui文件夹</p><p>其中最主要的是<code>setui_scr_screen.c</code>与<code>setup_scr_screen1.c</code>这两个文件中存储了所有ui对象。</p><p>这里仅以screen和播放按钮为例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">setup_scr_screen</span><span class="hljs-params">(lv_ui *ui)</span>&#123;<br><br><span class="hljs-comment">//Write codes screen</span><br>ui-&gt;screen = lv_obj_create(<span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//Write style LV_OBJ_PART_MAIN for screen</span><br><span class="hljs-type">static</span> <span class="hljs-type">lv_style_t</span> style_screen_main;<br>lv_style_reset(&amp;style_screen_main);<br><br><span class="hljs-comment">//Write style state: LV_STATE_DEFAULT for style_screen_main</span><br>lv_style_set_bg_color(&amp;style_screen_main, LV_STATE_DEFAULT, lv_color_make(<span class="hljs-number">0xe8</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xe8</span>));<br>lv_style_set_bg_opa(&amp;style_screen_main, LV_STATE_DEFAULT, <span class="hljs-number">0</span>);<br>lv_obj_add_style(ui-&gt;screen, LV_OBJ_PART_MAIN, &amp;style_screen_main);<br><br><span class="hljs-comment">//Write codes screen_btn_4</span><br>ui-&gt;screen_btn_4 = lv_btn_create(ui-&gt;screen, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">//Write style LV_BTN_PART_MAIN for screen_btn_4</span><br><span class="hljs-type">static</span> <span class="hljs-type">lv_style_t</span> style_screen_btn_4_main;<br>lv_style_reset(&amp;style_screen_btn_4_main);<br><br><span class="hljs-comment">//Write style state: LV_STATE_DEFAULT for style_screen_btn_4_main</span><br>lv_style_set_radius(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">50</span>);<br>lv_style_set_bg_color(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_color(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_dir(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, LV_GRAD_DIR_NONE);<br>lv_style_set_bg_opa(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">255</span>);<br>lv_style_set_shadow_color(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, lv_color_make(<span class="hljs-number">0x6f</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x69</span>));<br>lv_style_set_shadow_width(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_opa(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">255</span>);<br>lv_style_set_shadow_spread(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_ofs_x(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_ofs_y(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">0</span>);<br>lv_style_set_border_color(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, lv_color_make(<span class="hljs-number">0x01</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xb1</span>));<br>lv_style_set_border_width(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">2</span>);<br>lv_style_set_border_opa(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, <span class="hljs-number">255</span>);<br>lv_style_set_text_color(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, lv_color_make(<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>));<br>lv_style_set_text_font(&amp;style_screen_btn_4_main, LV_STATE_DEFAULT, &amp;lv_font_chinese_12);<br><br><span class="hljs-comment">//Write style state: LV_STATE_FOCUSED for style_screen_btn_4_main</span><br>lv_style_set_radius(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">50</span>);<br>lv_style_set_bg_color(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_color(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_dir(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, LV_GRAD_DIR_NONE);<br>lv_style_set_bg_opa(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">255</span>);<br>lv_style_set_shadow_color(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, lv_color_make(<span class="hljs-number">0x6f</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x59</span>));<br>lv_style_set_shadow_width(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_opa(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">255</span>);<br>lv_style_set_shadow_spread(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_ofs_x(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_ofs_y(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">0</span>);<br>lv_style_set_border_color(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, lv_color_make(<span class="hljs-number">0x01</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xb1</span>));<br>lv_style_set_border_width(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">2</span>);<br>lv_style_set_border_opa(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, <span class="hljs-number">255</span>);<br>lv_style_set_text_color(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, lv_color_make(<span class="hljs-number">0xf0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>));<br>lv_style_set_text_font(&amp;style_screen_btn_4_main, LV_STATE_FOCUSED, &amp;lv_font_chinese_12);<br><br><span class="hljs-comment">//Write style state: LV_STATE_PRESSED for style_screen_btn_4_main</span><br>lv_style_set_radius(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">50</span>);<br>lv_style_set_bg_color(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_color(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_dir(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, LV_GRAD_DIR_NONE);<br>lv_style_set_bg_opa(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">255</span>);<br>lv_style_set_shadow_color(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, lv_color_make(<span class="hljs-number">0x21</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xf6</span>));<br>lv_style_set_shadow_width(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_opa(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">255</span>);<br>lv_style_set_shadow_spread(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_ofs_x(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">0</span>);<br>lv_style_set_shadow_ofs_y(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">0</span>);<br>lv_style_set_border_color(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, lv_color_make(<span class="hljs-number">0x01</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xb1</span>));<br>lv_style_set_border_width(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">2</span>);<br>lv_style_set_border_opa(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, <span class="hljs-number">255</span>);<br>lv_style_set_text_color(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, lv_color_make(<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>));<br>lv_style_set_text_font(&amp;style_screen_btn_4_main, LV_STATE_PRESSED, &amp;lv_font_chinese_12);<br><br><span class="hljs-comment">//Write style state: LV_STATE_DISABLED for style_screen_btn_4_main</span><br>lv_style_set_radius(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, <span class="hljs-number">50</span>);<br>lv_style_set_bg_color(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, lv_color_make(<span class="hljs-number">0xaa</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x1a</span>));<br>lv_style_set_bg_grad_color(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, lv_color_make(<span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xff</span>));<br>lv_style_set_bg_grad_dir(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, LV_GRAD_DIR_NONE);<br>lv_style_set_bg_opa(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, <span class="hljs-number">255</span>);<br>lv_style_set_border_color(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, lv_color_make(<span class="hljs-number">0x01</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xb1</span>));<br>lv_style_set_border_width(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, <span class="hljs-number">2</span>);<br>lv_style_set_border_opa(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, <span class="hljs-number">255</span>);<br>lv_style_set_outline_color(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, lv_color_make(<span class="hljs-number">0xd4</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xd9</span>));<br>lv_style_set_outline_opa(&amp;style_screen_btn_4_main, LV_STATE_DISABLED, <span class="hljs-number">255</span>);<br>lv_obj_add_style(ui-&gt;screen_btn_4, LV_BTN_PART_MAIN, &amp;style_screen_btn_4_main);<br>lv_obj_set_pos(ui-&gt;screen_btn_4, <span class="hljs-number">212</span>, <span class="hljs-number">17</span>);<br>lv_obj_set_size(ui-&gt;screen_btn_4, <span class="hljs-number">96</span>, <span class="hljs-number">47</span>);<br>ui-&gt;screen_btn_4_label = lv_label_create(ui-&gt;screen_btn_4, <span class="hljs-literal">NULL</span>);<br>lv_label_set_text(ui-&gt;screen_btn_4_label, <span class="hljs-string">&quot;播放&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></p><p>其实guiguider的主要作用就是生成lvgl样式(style)对象减轻ui开发负担。</p><p>最终将这些对象都集合在一个结构体中： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">lv_obj_t</span> *screen;<br><span class="hljs-type">bool</span> screen_del;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_4;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_4_label;<br><span class="hljs-type">lv_obj_t</span> *screen_label_1;<br><span class="hljs-type">lv_obj_t</span> *screen_label_2;<br><span class="hljs-type">lv_obj_t</span> *screen_list_1;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_5;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_5_label;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_6;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_6_label;<br><span class="hljs-type">lv_obj_t</span> *screen_bar_1;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_7;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_7_label;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_8;<br><span class="hljs-type">lv_obj_t</span> *screen_btn_8_label;<br><span class="hljs-type">lv_obj_t</span> *screen_bar_2;<br><span class="hljs-type">lv_obj_t</span> *screen_1;<br><span class="hljs-type">bool</span> screen_1_del;<br><span class="hljs-type">lv_obj_t</span> *screen_1_bar_1;<br><span class="hljs-type">lv_obj_t</span> *screen_1_label_1;<br><span class="hljs-type">lv_obj_t</span> *screen_1_label_2;<br>&#125;lv_ui;<br></code></pre></td></tr></table></figure>接下来无论是要修改样式还是制作动画都只需要访问结构体中的对象来设置即可。</p><h3 id="unicodeutf-8与gb2312">3.3.4 UNICODE,UTF-8与GB2312</h3><p>本项目因为需要显示中文字体，必然绕不开的就是字符编码。由于fatfs文件系统的中文字符编码是gb2312格式，而lvgl只能显示出utf-8格式的字体所以需要一个将gb2312编码转化为utf-8编码的函数。</p><p>首先通过fatfs读出文件名<code>f_readdir(&amp;dir, &amp;fileinfo);</code>将文件信息读取到<code>fileinfo</code>结构体中。<code>fn = *fileinfo.lfname ? fileinfo.lfname : fileinfo.fname;</code>然后将文件名地址赋值给fn指针（fn是一个char*类型的指针）。之后我们通过遍历<code>*fn</code>来进行处理。</p><p>首先，GB2312编码中，每个汉字占两个字节，但是文件名中可能不只有汉字，所以我们可以通过<code>fn[i] &amp; 0x80</code>来判断<code>fn[i]</code>与<code>fn[i+1]</code>是否属于一个汉字，若属于一个汉字则将这两个字节拼接：<code>src = fn[i + 1] | (fn[i] &lt;&lt; 8);</code>;src中存储的就是一个gb2312编码的汉字。</p><p>读取出gb2312格式的汉字后只需要通过fatfs中内置的<code>int temp = (int)ff_convert(src, 1);</code>函数来将其转化为Unicode字符，其原理就是简单的查表，<imgsrc="https://s3.bmp.ovh/imgs/2025/02/26/c8dae8a175e21889.webp" /></p><p>这一步操作相当于招到了这个汉字的序号，而我们还需要将编码为一种特定的格式，就是utf-8格式</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">U</span>+<span class="hljs-number">0000</span>  - U+<span class="hljs-number">007</span>F:   <span class="hljs-number">0</span>xxxxxxx (<span class="hljs-number">1</span>个字节)<br><span class="hljs-attribute">U</span>+<span class="hljs-number">0080</span>  - U+<span class="hljs-number">07</span>FF:   <span class="hljs-number">110</span>xxxxx <span class="hljs-number">10</span>xxxxxx (<span class="hljs-number">2</span>个字节)<br><span class="hljs-attribute">U</span>+<span class="hljs-number">0800</span>  - U+FFFF:   <span class="hljs-number">1110</span>xxxx <span class="hljs-number">10</span>xxxxxx <span class="hljs-number">10</span>xxxxxx (<span class="hljs-number">3</span>个字节)<br><span class="hljs-attribute">U</span>+<span class="hljs-number">10000</span> - U+<span class="hljs-number">10</span>FFFF: <span class="hljs-number">11110</span>xxx <span class="hljs-number">10</span>xxxxxx <span class="hljs-number">10</span>xxxxxx <span class="hljs-number">10</span>xxxxxx (<span class="hljs-number">4</span>个字节)<br></code></pre></td></tr></table></figure><p>例如 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-number">4</span>   E    <span class="hljs-number">2</span>    D<br><span class="hljs-number">0100</span> <span class="hljs-number">1110</span> <span class="hljs-number">0010</span> <span class="hljs-number">1101</span><br> -----------------------------<br> <span class="hljs-number">1110</span>xxxx <span class="hljs-number">10</span>xxxxxx <span class="hljs-number">10</span>xxxxxx  <span class="hljs-comment">// 上表第三行</span><br> ____0100 __111000 __101101  <span class="hljs-comment">// 将 4E2D 的二进制带入上面的格式中</span><br> -----------------------------<br> <span class="hljs-number">11100100</span> <span class="hljs-number">10111000</span> <span class="hljs-number">10101101</span>  <br></code></pre></td></tr></table></figure>所以，只需要按照上面的规律实现一个函数就可以转化unicode为utf-8格式。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/********************************************    *  ********************************</span><br><span class="hljs-comment">  * 将一个字符的Unicode(UCS-2和UCS-4)编码转换成      UTF-8编码.</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * 参数:</span><br><span class="hljs-comment">  *    unic     字符的Unicode编码值</span><br><span class="hljs-comment">  *    pOutput  指向输出的用于存储UTF8编码值的缓 冲   区的指针</span><br><span class="hljs-comment">  *    outsize  pOutput缓冲的大小</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * 返回值:</span><br><span class="hljs-comment">  *    返回转换后的字符的UTF8编码所占的字节数, 如    果  出错则返回 0 .</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * 注意:</span><br><span class="hljs-comment">  *     1. UTF8没有字节序问题, 但是Unicode有字节 序   要求;</span><br><span class="hljs-comment">  *        字节序分为大端(Big Endian)和小端      (Little Endian)两种;</span><br><span class="hljs-comment">  *        在Intel处理器中采用小端法表示, 在此采 用   小端法表示. (低地址存低位)</span><br><span class="hljs-comment">  *     2. 请保证 pOutput 缓冲区有最少有 6 字节  的    空间大小!</span><br><span class="hljs-comment">  *******************************************    *   ********************************/</span><br> <span class="hljs-type">int</span> <span class="hljs-title function_">enc_unicode_to_utf8_one</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>       unic, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *pOutput,</span><br><span class="hljs-params"> <span class="hljs-type">int</span> outSize)</span><br> &#123;<br> <span class="hljs-comment">// assert(pOutput != NULL);</span><br> <span class="hljs-comment">// assert(outSize &gt;= 6);</span><br> <br> <span class="hljs-keyword">if</span> (unic &lt;= <span class="hljs-number">0x0000007F</span>)<br> &#123;<br> <span class="hljs-comment">// * U-00000000 - U-0000007F:       0xxxxxxx</span><br> *pOutput = (unic &amp; <span class="hljs-number">0x7F</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unic &gt;= <span class="hljs-number">0x00000080</span> &amp;&amp; unic &lt;=      <span class="hljs-number">0x000007FF</span>)<br> &#123;<br> <span class="hljs-comment">// * U-00000080 - U-000007FF:       110xxxxx 10xxxxxx</span><br> *(pOutput + <span class="hljs-number">1</span>) = (unic &amp; <span class="hljs-number">0x3F</span>) |        <span class="hljs-number">0x80</span>;<br> *pOutput = ((unic &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0x1F</span>) |       <span class="hljs-number">0xC0</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unic &gt;= <span class="hljs-number">0x00000800</span> &amp;&amp; unic &lt;=      <span class="hljs-number">0x0000FFFF</span>)<br> &#123;<br> <span class="hljs-comment">// * U-00000800 - U-0000FFFF:       1110xxxx 10xxxxxx 10xxxxxx</span><br> *(pOutput + <span class="hljs-number">2</span>) = (unic &amp; <span class="hljs-number">0x3F</span>) |        <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">1</span>) = ((unic &gt;&gt; <span class="hljs-number">6</span>) &amp;         <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *pOutput = ((unic &gt;&gt; <span class="hljs-number">12</span>) &amp; <span class="hljs-number">0x0F</span>) |      <span class="hljs-number">0xE0</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unic &gt;= <span class="hljs-number">0x00010000</span> &amp;&amp; unic &lt;=      <span class="hljs-number">0x001FFFFF</span>)<br> &#123;<br> <span class="hljs-comment">// * U-00010000 - U-001FFFFF:       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br> *(pOutput + <span class="hljs-number">3</span>) = (unic &amp; <span class="hljs-number">0x3F</span>) |        <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">2</span>) = ((unic &gt;&gt; <span class="hljs-number">6</span>) &amp;         <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">1</span>) = ((unic &gt;&gt; <span class="hljs-number">12</span>) &amp;        <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *pOutput = ((unic &gt;&gt; <span class="hljs-number">18</span>) &amp; <span class="hljs-number">0x07</span>) |      <span class="hljs-number">0xF0</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unic &gt;= <span class="hljs-number">0x00200000</span> &amp;&amp; unic &lt;=      <span class="hljs-number">0x03FFFFFF</span>)<br> &#123;<br> <span class="hljs-comment">// * U-00200000 - U-03FFFFFF:       111110xx 10xxxxxx 10xxxxxx  10xxxxxx  10xxxxxx</span><br> *(pOutput + <span class="hljs-number">4</span>) = (unic &amp; <span class="hljs-number">0x3F</span>) |        <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">3</span>) = ((unic &gt;&gt; <span class="hljs-number">6</span>) &amp;         <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">2</span>) = ((unic &gt;&gt; <span class="hljs-number">12</span>) &amp;        <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">1</span>) = ((unic &gt;&gt; <span class="hljs-number">18</span>) &amp;        <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *pOutput = ((unic &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0x03</span>) |      <span class="hljs-number">0xF8</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unic &gt;= <span class="hljs-number">0x04000000</span> &amp;&amp; unic &lt;=      <span class="hljs-number">0x7FFFFFFF</span>)<br> &#123;<br> <span class="hljs-comment">// * U-04000000 - U-7FFFFFFF:       1111110x 10xxxxxx 10xxxxxx  10xxxxxx  10xxxxxx 10xxxxxx</span><br> *(pOutput + <span class="hljs-number">5</span>) = (unic &amp; <span class="hljs-number">0x3F</span>) |        <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">4</span>) = ((unic &gt;&gt; <span class="hljs-number">6</span>) &amp;         <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">3</span>) = ((unic &gt;&gt; <span class="hljs-number">12</span>) &amp;        <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">2</span>) = ((unic &gt;&gt; <span class="hljs-number">18</span>) &amp;        <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *(pOutput + <span class="hljs-number">1</span>) = ((unic &gt;&gt; <span class="hljs-number">24</span>) &amp;        <span class="hljs-number">0x3F</span>) | <span class="hljs-number">0x80</span>;<br> *pOutput = ((unic &gt;&gt; <span class="hljs-number">30</span>) &amp; <span class="hljs-number">0x01</span>) |      <span class="hljs-number">0xFC</span>;<br> <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br> &#125;<br> <br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br> &#125;<br></code></pre></td></tr></table></figure><p>将处理完的字符存储在数组中，最后使用<code>lv_list_add_btn(ui-&gt;screen_list_1, LV_SYMBOL_AUDIO, utf);</code>就可以在lvgl的列表中加入一个显示中文文件名的按钮。</p><h3 id="常用汉字库">3.3.5 常用汉字库</h3><p>在转化为utf-8后，lvgl已经认识了，但是缺少字体文件，接下来还需要将常见的ttf字体文件转化为一个个字符数组，这里我使用了gui-guider内置的字体生成器<img src="https://s3.bmp.ovh/imgs/2025/02/27/ebc01816a4b969d6.webp" />最终会生成如下的字模数组。</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">/* U+9ED4 &quot;黔&quot; */</span><br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0xc5</span>,<br><span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0xbe</span>,<br><span class="hljs-number">0xe</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0x70</span>,<br><span class="hljs-number">0xb9</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0xfa</span>,<br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x1</span>,<br><span class="hljs-number">0x2e</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0xe7</span>,<br><span class="hljs-number">0x30</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x40</span>,<br><span class="hljs-number">0x1f</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0xf0</span>,<br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<br><span class="hljs-number">0x10</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<br><br><span class="hljs-comment">/* U+9ED8 &quot;默&quot; */</span><br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0xc3</span>,<br><span class="hljs-number">0x94</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x6c</span>,<br><span class="hljs-number">0x3</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x3d</span>,<br><span class="hljs-number">0x5</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0x86</span>,<br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<br><span class="hljs-number">0xe</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xe8</span>,<br><span class="hljs-number">0x40</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x1b</span>,<br><span class="hljs-number">0x48</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x2f</span>,<br><span class="hljs-number">0x80</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x0</span>,<br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<br><br><span class="hljs-comment">/* U+9EEF &quot;黯&quot; */</span><br><span class="hljs-number">0x96</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xd6</span>,<br><span class="hljs-number">0xd3</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x55</span>,<br><span class="hljs-number">0x6c</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x20</span>,<br><span class="hljs-number">0x51</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xd6</span>,<br><span class="hljs-number">0x72</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x39</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0x60</span>,<br><span class="hljs-number">0x36</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x65</span>,<br><span class="hljs-number">0x84</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0xe3</span>,<br><span class="hljs-number">0x3c</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<br><br><span class="hljs-comment">/* U+9F0E &quot;鼎&quot; */</span><br><span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x90</span>,<br><span class="hljs-number">0xe4</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xa</span>,<br><span class="hljs-number">0x53</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xf0</span>,<br><span class="hljs-number">0x1</span>, <span class="hljs-number">0xe0</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0xe3</span>,<br><span class="hljs-number">0x83</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xf</span>,<br><span class="hljs-number">0x10</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xf</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xe3</span>,<br><span class="hljs-number">0x0</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xf</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x60</span>,<br><span class="hljs-number">0xc7</span>, <span class="hljs-number">0xf</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xd</span>,<br><span class="hljs-number">0x0</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x0</span>,<br><br></code></pre></td></tr></table></figure></p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/25/4d60849221edca27.jpg" /></p><h2 id="多任务">3.4 多任务</h2><p>在这么一个播放器中，单片机在同一时间段需要处理许多任务，例如按下按钮的检测，动画的展示，文件的读取，音频数据的传输...此时若单纯的使用定时器会显得杂乱，不好管理，而且实时性较强的音频解码可能会被阻塞导致音乐卡顿，此时就需要多任务管理。</p><h3 id="lvgl内置的任务模块">3.4.1 lvgl内置的任务模块</h3><p>lvgl内置了一个非抢占式的任务模块（也就是一个任务无法打断另一个任务），虽然任务模块为非抢占式，不如RTOS的抢占式，但是由于其占用少，而且在本项目中的最耗时的刷新屏幕与解码音乐也无法被打断，所以最终选择了lvgl内置的任务模块。</p><p>在lvgl中创建一个任务很简单： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">lv_task_t</span> *task      = lv_task_create(my_task, <span class="hljs-number">100</span>, LV_TASK_PRIO_HIGHEST, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">//my_task：任务函数</span><br><span class="hljs-comment">//100：每次调用间隔</span><br><span class="hljs-comment">//LV_TASK_PRIO_HIGHEST：优先级为高；</span><br><span class="hljs-comment">//NULL:传参给任务函数的参数指针。</span><br></code></pre></td></tr></table></figure>创建完任务后就可以让lvgl自行根据优先级高低调用任务函数。</p><p>在本项目中就通过这种方法结合状态机来解码音乐。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs c">u8 <span class="hljs-title function_">my_task</span><span class="hljs-params">(<span class="hljs-type">lv_task_t</span> *task)</span><br>&#123;<br><br><span class="hljs-keyword">if</span> (playFlag == <span class="hljs-number">1</span> &amp;&amp; wavtransferend == <span class="hljs-number">1</span> &amp;&amp; audiodev.status &amp; <span class="hljs-number">1</span>)<br>&#123;<br>show_secbar(wavctrl.cursec * <span class="hljs-number">100</span> / wavctrl.totsec);<br>wavtransferend = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (wavwitchbuf)<br>fillnum = wav_buffill(audiodev.i2sbuf2, WAV_I2S_TX_DMA_BUFSIZE, wavctrl.bps); <span class="hljs-comment">// 填充buf2</span><br><span class="hljs-keyword">else</span><br>fillnum = wav_buffill(audiodev.i2sbuf1, WAV_I2S_TX_DMA_BUFSIZE, wavctrl.bps); <span class="hljs-comment">// 填充buf1</span><br><br>wav_get_curtime(audiodev.file, &amp;wavctrl); <span class="hljs-comment">// 得到总时间和当前播放的时间</span><br><span class="hljs-keyword">if</span> (fillnum != WAV_I2S_TX_DMA_BUFSIZE)<br>&#123;<br><span class="hljs-comment">// 这里是播放一首歌完毕的时候</span><br>audio_stop();<br>playFlag = <span class="hljs-number">0</span>;<br>res = <span class="hljs-number">0xff</span>;<br>fillnum = <span class="hljs-number">0</span>;<br>myfree(SRAMEX, audiodev.tbuf);  <span class="hljs-comment">// 释放内存</span><br>myfree(SRAMEX, audiodev.i2sbuf1); <span class="hljs-comment">// 释放内存</span><br>myfree(SRAMEX, audiodev.i2sbuf2); <span class="hljs-comment">// 释放内存</span><br>myfree(SRAMEX, audiodev.file);  <span class="hljs-comment">// 释放内存</span><br>mf_play_next_file(<span class="hljs-string">&quot;0:&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (playFlag == <span class="hljs-number">1</span> &amp;&amp; wavtransferend == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (playFlag == <span class="hljs-number">0</span>)<br>&#123;<br><br>audiodev.file = (FIL *)mymalloc(SRAMEX, <span class="hljs-keyword">sizeof</span>(FIL));<br>audiodev.i2sbuf1 = mymalloc(SRAMEX, WAV_I2S_TX_DMA_BUFSIZE);<br>audiodev.i2sbuf2 = mymalloc(SRAMEX, WAV_I2S_TX_DMA_BUFSIZE);<br>audiodev.tbuf = mymalloc(SRAMEX, WAV_I2S_TX_DMA_BUFSIZE);<br><span class="hljs-keyword">if</span> (audiodev.file &amp;&amp; audiodev.i2sbuf1 &amp;&amp; audiodev.i2sbuf2 &amp;&amp; audiodev.tbuf)<br>&#123;<br>res = wav_decode_init(fileName, &amp;wavctrl); <span class="hljs-comment">// 得到文件的信息</span><br>show_bitrate(wavctrl.samplerate, wavctrl.bps);<br><span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>) <span class="hljs-comment">// 解析文件成功</span><br>&#123;<br><span class="hljs-keyword">if</span> (wavctrl.bps == <span class="hljs-number">16</span>)<br>&#123;<br>WM8978_I2S_Cfg(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>);   <span class="hljs-comment">// 飞利浦标准,16位数据长度</span><br>I2S2_Init(I2S_Standard_Phillips, I2S_Mode_MasterTx, I2S_CPOL_Low, I2S_DataFormat_16bextended); <span class="hljs-comment">// 飞利浦标准,主机发送,时钟低电平有效,16位扩展帧长度</span><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (wavctrl.bps == <span class="hljs-number">24</span>)<br>&#123;<br>WM8978_I2S_Cfg(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);   <span class="hljs-comment">// 飞利浦标准,24位数据长度</span><br>I2S2_Init(I2S_Standard_Phillips, I2S_Mode_MasterTx, I2S_CPOL_Low, I2S_DataFormat_24b); <span class="hljs-comment">// 飞利浦标准,主机发送,时钟低电平有效,24位扩展帧长度</span><br>&#125;<br>I2S2_SampleRate_Set(wavctrl.samplerate);  <span class="hljs-comment">// 设置采样率</span><br>I2S2_TX_DMA_Init(audiodev.i2sbuf1, audiodev.i2sbuf2, WAV_I2S_TX_DMA_BUFSIZE / <span class="hljs-number">2</span>); <span class="hljs-comment">// 配置TX DMA</span><br>i2s_tx_callback = wav_i2s_dma_tx_callback;  <span class="hljs-comment">// 回调函数指wav_i2s_dma_callback</span><br>audio_stop();<br>res = f_open(audiodev.file, (TCHAR *)fileName, FA_READ); <span class="hljs-comment">// 打开文件</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,fileName);<br><span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>&#123;<br>f_lseek(audiodev.file, wavctrl.datastart); <span class="hljs-comment">// 跳过文件头</span><br>fillnum = wav_buffill(audiodev.i2sbuf1, WAV_I2S_TX_DMA_BUFSIZE, wavctrl.bps);<br>fillnum = wav_buffill(audiodev.i2sbuf2, WAV_I2S_TX_DMA_BUFSIZE, wavctrl.bps);<br>audio_start();<br><span class="hljs-keyword">if</span> (res == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">while</span> (wavtransferend == <span class="hljs-number">0</span>)<br>; <span class="hljs-comment">// 等待wav传输完成;</span><br>wavtransferend = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (wavwitchbuf)<br>fillnum = wav_buffill(audiodev.i2sbuf2, WAV_I2S_TX_DMA_BUFSIZE, wavctrl.bps); <span class="hljs-comment">// 填充buf2</span><br><span class="hljs-keyword">else</span><br>fillnum = wav_buffill(audiodev.i2sbuf1, WAV_I2S_TX_DMA_BUFSIZE, wavctrl.bps); <span class="hljs-comment">// 填充buf1</span><br><br>playFlag = <span class="hljs-number">1</span>;<br>wav_get_curtime(audiodev.file, &amp;wavctrl); <span class="hljs-comment">// 得到总时间和当前播放的时间</span><br><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>res = <span class="hljs-number">0XFF</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>res = <span class="hljs-number">0XFF</span>;<br>myfree(SRAMEX, audiodev.tbuf);  <span class="hljs-comment">// 释放内存</span><br>myfree(SRAMEX, audiodev.i2sbuf1); <span class="hljs-comment">// 释放内存</span><br>myfree(SRAMEX, audiodev.i2sbuf2); <span class="hljs-comment">// 释放内存</span><br>myfree(SRAMEX, audiodev.file);  <span class="hljs-comment">// 释放内存</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>res = <span class="hljs-number">0XFF</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得一提的是：自定义任务的优先级无法高于lvgl内部任务（如刷新动画，按钮检测）。</p><h3 id="事件">3.4.2 事件</h3><p>lvgl具有事件模块，当用户操作屏幕或点击按钮时，通过lvgl可以设置对应事件的回调函数来让单片机做出相应反应。</p><p>在这个项目中常用的就是这个方式：<code>lv_obj_set_event_cb(ui-&gt;screen_btn_4, screen_btn_4event_handler);</code>第一个参数是触发事件的对象，第二个是回调函数，这里不区分事件是什么,而是在回调函数的参数event中来判断是什么事件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">screen_btn_4event_handler</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span> *obj, <span class="hljs-type">lv_event_t</span> event)</span><br>&#123;<br>    <span class="hljs-keyword">switch</span> (event)<br>&#123;<br><span class="hljs-keyword">case</span> LV_EVENT_PRESSED:<br>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上这段代码就是判断lvgl的btn4对象是否被按下。</p><h2 id="用户交互">3.5 用户交互</h2><h3 id="焦点组与按键">3.5.1 焦点、组与按键</h3><p>前文提到了任务系统就是隔一段事件以一定优先级来执行任务函数，这与按键扫描类似，lvgl中也是通过轮询的方式来看哪个按键被按下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">lv_group_t</span> *group;<br><span class="hljs-comment">/*Initialize your keypad or keyboard if youhave*/</span><br>keypad_init();<br><span class="hljs-comment">/*Register a keypad input device*/</span><br>lv_indev_drv_init(&amp;indev_drv);<br>indev_drv.type = LV_INDEV_TYPE_KEYPAD;<br>indev_drv.read_cb = keypad_read;<br>indev_keypad = lv_indev_drv_register(indev_drv);<br><span class="hljs-comment">// 创建一个group</span><br>group = lv_group_create();<br>lv_indev_set_group(indev_keypad, group);<br><span class="hljs-comment">/* Will be called by the library to read the key */</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">keypad_read</span><span class="hljs-params">(<span class="hljs-type">lv_indev_drv_t</span> *indev_drv, <span class="hljs-type">lv_indev_data_t</span> *data)</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> last_key = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/*Get whether the a key is pressed and save the pressed key*/</span><br>    <span class="hljs-type">uint32_t</span> act_key = KEY_Scan(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (act_key != <span class="hljs-number">0</span>)<br>    &#123;<br>        data-&gt;state = LV_INDEV_STATE_PR;<br><br>        <span class="hljs-comment">/*Translate the keys to LVGL control characters according to your key definitions*/</span><br>        <span class="hljs-keyword">switch</span> (act_key)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            act_key = LV_KEY_NEXT;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            act_key = LV_KEY_PREV;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            act_key = LV_KEY_LEFT;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            act_key = LV_KEY_RIGHT;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            act_key = LV_KEY_ENTER;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        last_key = act_key;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        data-&gt;state = LV_INDEV_STATE_REL;<br>    &#125;<br><br>    data-&gt;key = last_key;<br><br>    <span class="hljs-comment">/*Return `false` because we are not buffering and no more data to read*/</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>lvgl中定义了几种按键的对应操作，例如代码中的<code>LV_KEY_RIGHT</code>就代表了选中下一个对象（焦点移到下一个对象）。</p><p>但在这之前我们还需要告诉lvgl应该在哪几个对象中切换焦点。这就需要将这些对象加入到一个group中： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>lv_group_add_obj(group, guider_ui.screen_btn_4);<br>lv_group_add_obj(group, guider_ui.screen_btn_5);<br>lv_group_add_obj(group, guider_ui.screen_btn_6);<br>lv_group_add_obj(group, guider_ui.screen_btn_7);<br>lv_group_add_obj(group, guider_ui.screen_btn_8);<br>lv_group_add_obj(group, guider_ui.screen_list_1);<br></code></pre></td></tr></table></figure></p><p>在本项目屏幕上的表现就是下一个按钮发光以及字体变红。 <imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/5fd8cf72546e7785.webp" /> <imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/4555b5b73595709e.webp" /></p><h3 id="值与文字的设置">3.5.2 值与文字的设置</h3><p>在这个界面中，需要设置值的就是标题、采样率、进度条和文件列表项目。</p><p>只需要将lvgl对象的值传入lvgl的特定函数就可以设置值了。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">show_bitrate</span><span class="hljs-params">(u16 bitrate, u16 bps)</span><br>&#123;<br>lv_label_set_text_fmt(_ui-&gt;screen_label_1, <span class="hljs-string">&quot;%dhz %dbit&quot;</span>, bitrate, bps);<br>lv_label_set_text_fmt(_ui-&gt;screen_1_label_2, <span class="hljs-string">&quot;%dhz %dbit&quot;</span>, bitrate, bps);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_secbar</span><span class="hljs-params">(u8 value)</span><br>&#123;<br>lv_bar_set_value(_ui-&gt;screen_bar_1, value, LV_ANIM_OFF);<br>lv_bar_set_value(_ui-&gt;screen_1_bar_1, value, LV_ANIM_OFF);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">show_title</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *text)</span><br>&#123;<br>lv_label_set_text(_ui-&gt;screen_label_2, text);<br>lv_label_set_text(_ui-&gt;screen_1_label_1, text);<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="界面的切换">3.5.3 界面的切换</h3><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/0c3e2036315a9d6a.webp" /></p><p>前文提及，音频解码需要较高实时性且尽量不被阻塞，刷屏占用较长时间的mcu这就会导致音乐卡顿，于是我的解决方案是在播放音乐时强制跳转到播放界面，只有暂停才可以跳出这个页面，所以这就涉及到lvgl切换页面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">screen_btn_4event_handler</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span> *obj, <span class="hljs-type">lv_event_t</span> event)</span><br>&#123;<br><span class="hljs-keyword">switch</span> (event)<br>&#123;<br><span class="hljs-keyword">case</span> LV_EVENT_PRESSED:<br>&#123;<br><span class="hljs-keyword">if</span> (audiodev.status == <span class="hljs-number">0</span>)<br>&#123;<br><br>lv_label_set_text(_ui-&gt;screen_btn_4_label, <span class="hljs-string">&quot;PLAYING&quot;</span>);<br>lv_scr_load(_ui-&gt;screen_1);<br>lv_group_focus_freeze(group, ENABLE);<br>audiodev.status |= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>audiodev.status &amp;= <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-number">0</span>;<br><br>lv_scr_load(_ui-&gt;screen);<br>lv_group_focus_freeze(group, DISABLE);<br>lv_label_set_text(_ui-&gt;screen_btn_4_label, <span class="hljs-string">&quot;暂停中&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中：<code>lv_scr_load(_ui-&gt;screen_1);</code>函数就是加载另一个页面，这样就会显示播放页面了。</p><h2 id="音频播放">3.6 音频播放</h2><h3 id="选歌">3.6.1 选歌</h3><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/c845c8533207f004.webp" />当焦点移到文件列表上是通过之前提及的事件回调函数就可以判断出点击，点击之后通过回调函数参数可以获得触发事件的对象。</p><p>触发事件的对象中含有在文件列表初始化时就写入的文件名（gb2312编码）属性</p><p>这样就可以播放音乐了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">screen_list_1_item_event_handler</span><span class="hljs-params">(<span class="hljs-type">lv_obj_t</span> *obj, <span class="hljs-type">lv_event_t</span> event)</span><br>&#123;<br><span class="hljs-keyword">switch</span> (event)<br>&#123;<br><span class="hljs-keyword">case</span> LV_EVENT_PRESSED:<br>&#123;<br><span class="hljs-comment">// 处理文件项目点击事件。</span><br><span class="hljs-type">lv_obj_t</span> *play_btn = _ui-&gt;screen_btn_4;<br><span class="hljs-built_in">strcpy</span>(play_btn-&gt;file_src, obj-&gt;file_src);<br><span class="hljs-type">static</span> <span class="hljs-type">char</span> src[<span class="hljs-number">128</span>];<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++)<br>&#123;<br>src[i] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-built_in">strcat</span>(src, <span class="hljs-string">&quot;0:&quot;</span>);<br><span class="hljs-built_in">strcat</span>(src, obj-&gt;file_src);<br><span class="hljs-keyword">if</span> (f_typetell(src) == <span class="hljs-number">0X40</span>)<br>&#123;<br>set_play_name(src);<span class="hljs-comment">//设置播放音乐名</span><br>audiodev.status |= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>;<br>lv_label_set_text(_ui-&gt;screen_btn_4_label, <span class="hljs-string">&quot;PLAYING&quot;</span>);<br>lv_scr_load(_ui-&gt;screen_1);<br>lv_group_focus_obj(_ui-&gt;screen_btn_4);<br>lv_group_focus_freeze(group, ENABLE);<br>show_title(obj-&gt;file_utf);<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="切歌">3.6.2 切歌</h3><p>切歌的逻辑本质也是遍历，通过记录当前播放的歌曲来遍历找到正在播放的歌曲，此时就可以知道下一首歌曲的文件名，播放即可。</p><p>而播放上一首歌同样也是遍历，每步遍历都保存上一次文件名，知道找到正在播放的音乐，此时播放上一首即可。</p><p>这里以播放下一首为例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c">u8 next_song_flag; <span class="hljs-comment">// 判断是否下一首歌</span><br><span class="hljs-comment">// 得到某个文件下一个文件</span><br>u8 <span class="hljs-title function_">mf_play_next_file</span><span class="hljs-params">(u8 *path)</span><br>&#123;<br>FRESULT res;<br><span class="hljs-type">lv_obj_t</span> *play_btn = _ui_fat-&gt;screen_btn_4;<br><span class="hljs-type">char</span> src[<span class="hljs-number">128</span>];<br><span class="hljs-built_in">memset</span>(src, <span class="hljs-number">0</span>, <span class="hljs-number">128</span>);<br><span class="hljs-type">char</span> *fn; <br>fileinfo.lfname = mymalloc(SRAMEX, fileinfo.lfsize);<br>res = f_opendir(&amp;dir, (<span class="hljs-type">const</span> TCHAR *)path);<br><span class="hljs-keyword">if</span> (res == FR_OK)<br>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> utf[<span class="hljs-number">128</span>];<br>res = f_readdir(&amp;dir, &amp;fileinfo);<br><span class="hljs-keyword">if</span> (res != FR_OK || fileinfo.fname[<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br><br>fn = *fileinfo.lfname ? fileinfo.lfname : fileinfo.fname;<br><span class="hljs-keyword">if</span> (next_song_flag)<br>&#123;<br>next_song_flag = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">strcat</span>(src, <span class="hljs-string">&quot;0:&quot;</span>);<br><span class="hljs-built_in">strcat</span>(src, fn);<br>audiodev.status &amp;= <span class="hljs-number">0</span> &lt;&lt; <span class="hljs-number">0</span>;<br><span class="hljs-built_in">strcpy</span>(play_btn-&gt;file_src, fn);<br><span class="hljs-keyword">if</span> (f_typetell(src) == <span class="hljs-number">0X40</span>)<br>&#123;<br>set_play_name(src);<br><br>audiodev.status |= <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">0</span>;<br>lv_scr_load(_ui_fat-&gt;screen_1);<br>lv_group_focus_obj(_ui_fat-&gt;screen_btn_4);<br>lv_group_focus_freeze(group, ENABLE);<br>show_title(src);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>next_song_flag = <span class="hljs-built_in">strcmp</span>(play_btn-&gt;file_src, fn) == <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>myfree(SRAMEX, fileinfo.lfname);<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure></p><h3 id="调节音量">3.6.3 调节音量</h3><p>调节音量其实就是通过i2c给dac发送信息，以wm8978为例： <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">WM8978_SPKvol_Set</span><span class="hljs-params">(u8 volx)</span><br>&#123; <br>volx&amp;=<span class="hljs-number">0X3F</span>;<span class="hljs-comment">//限定范围</span><br><span class="hljs-keyword">if</span>(volx==<span class="hljs-number">0</span>)volx|=<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">6</span>;<span class="hljs-comment">//音量为0时,直接mute </span><br> WM8978_Write_Reg(<span class="hljs-number">54</span>,volx);<span class="hljs-comment">//寄存器54,喇叭左声道音量设置</span><br>WM8978_Write_Reg(<span class="hljs-number">55</span>,volx|(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">8</span>));<span class="hljs-comment">//寄存器55,喇叭右声道音量设置,同步更新(SPKVU=1)</span><br>&#125;<br></code></pre></td></tr></table></figure>在调节完之后调用<code>lv_bar_set_value(_ui-&gt;screen_bar_2, vol, LV_ANIM_OFF);</code>就可以设置音量条。</p><h3 id="显示进度音频采样率与码率">3.6.4 显示进度，音频采样率与码率</h3><p>首先，音频采样率、码率与文件大小在wav文件头部信息中都有，所以只需要获取到文件头信息并且解析就行。</p><p>思路：按照wav文件头编写结构体，结构体对象就会自然而然在内存中按照wav头展开，之后若要访问就可以直接访问结构体。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2025/02/27/7a856da6d690a28d.webp" /></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"> <br><span class="hljs-comment">//RIFF块</span><br><span class="hljs-keyword">typedef</span> __packed <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    u32 ChunkID;   <span class="hljs-comment">//chunk id;这里固定为&quot;RIFF&quot;,即0X46464952</span><br>    u32 ChunkSize ;   <span class="hljs-comment">//集合大小;文件总大小-8</span><br>    u32 Format;   <span class="hljs-comment">//格式;WAVE,即0X45564157</span><br>&#125;ChunkRIFF ;<br><span class="hljs-comment">//fmt块</span><br><span class="hljs-keyword">typedef</span> __packed <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    u32 ChunkID;   <span class="hljs-comment">//chunk id;这里固定为&quot;fmt &quot;,即0X20746D66</span><br>    u32 ChunkSize ;   <span class="hljs-comment">//子集合大小(不包括ID和Size);这里为:20.</span><br>    u16 AudioFormat;  <span class="hljs-comment">//音频格式;0X01,表示线性PCM;0X11表示IMA ADPCM</span><br>u16 NumOfChannels;<span class="hljs-comment">//通道数量;1,表示单声道;2,表示双声道;</span><br>u32 SampleRate;<span class="hljs-comment">//采样率;0X1F40,表示8Khz</span><br>u32 ByteRate;<span class="hljs-comment">//字节速率; </span><br>u16 BlockAlign;<span class="hljs-comment">//块对齐(字节); </span><br>u16 BitsPerSample;<span class="hljs-comment">//单个采样数据大小;4位ADPCM,设置为4</span><br><span class="hljs-comment">//u16 ByteExtraData;//附加的数据字节;2个; 线性PCM,没有这个参数</span><br>&#125;ChunkFMT;   <br><span class="hljs-comment">//fact块 </span><br><span class="hljs-keyword">typedef</span> __packed <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    u32 ChunkID;   <span class="hljs-comment">//chunk id;这里固定为&quot;fact&quot;,即0X74636166;</span><br>    u32 ChunkSize ;   <span class="hljs-comment">//子集合大小(不包括ID和Size);这里为:4.</span><br>    u32 NumOfSamples;  <span class="hljs-comment">//采样的数量; </span><br>&#125;ChunkFACT;<br><span class="hljs-comment">//LIST块 </span><br><span class="hljs-keyword">typedef</span> __packed <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    u32 ChunkID;   <span class="hljs-comment">//chunk id;这里固定为&quot;LIST&quot;,即0X74636166;</span><br>    u32 ChunkSize ;   <span class="hljs-comment">//子集合大小(不包括ID和Size);这里为:4. </span><br>&#125;ChunkLIST;<br><br><span class="hljs-comment">//data块 </span><br><span class="hljs-keyword">typedef</span> __packed <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    u32 ChunkID;   <span class="hljs-comment">//chunk id;这里固定为&quot;data&quot;,即0X5453494C</span><br>    u32 ChunkSize ;   <span class="hljs-comment">//子集合大小(不包括ID和Size) </span><br>&#125;ChunkDATA;<br><br><span class="hljs-comment">//wav头</span><br><span class="hljs-keyword">typedef</span> __packed <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span> <br>ChunkRIFF riff;<span class="hljs-comment">//riff块</span><br>ChunkFMT fmt;  <span class="hljs-comment">//fmt块</span><br><span class="hljs-comment">//ChunkFACT fact;//fact块 线性PCM,没有这个结构体 </span><br>ChunkDATA data;<span class="hljs-comment">//data块 </span><br>&#125;__WaveHeader; <br></code></pre></td></tr></table></figure><p>获得采样率和码率只需要调用：<code>lv_label_set_text_fmt(_ui-&gt;screen_label_1, "%dhz %dbit", bitrate, bps);</code>就可以格式化修改标签。</p><p>获得进度的原理就是计算读取了文件大小的多少然后算出比例：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">wav_get_curtime</span><span class="hljs-params">(FIL *fx, __wavctrl *wavx)</span><br>&#123;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> fpos;<br>wavx-&gt;totsec = wavx-&gt;datasize / (wavx-&gt;bitrate / <span class="hljs-number">8</span>); <span class="hljs-comment">// 歌曲总长度(单位:秒)</span><br>fpos = fx-&gt;fptr - wavx-&gt;datastart; <span class="hljs-comment">// 得到当前文件播放到的地方</span><br>wavx-&gt;cursec = fpos * wavx-&gt;totsec / wavx-&gt;datasize; <span class="hljs-comment">// 当前播放到第多少秒了?</span><br>&#125;<br></code></pre></td></tr></table></figure></p><p>之后设置进度条就可以了。</p><h1 id="四.缺点及下一步方向">四.缺点及下一步方向</h1><h2 id="显示部分-1">4.1 显示部分</h2><ul><li>刷屏速度缓慢</li><li>中文字显示不够清晰，字库仍有字无法显示</li><li>缺少其他语言支持</li></ul><h2 id="用户交互-1">4.2 用户交互</h2><ul><li>缺少触摸屏支持（硬件已支持）</li><li>歌曲、音量历史记录</li></ul><h2 id="音频部分">4.3 音频部分</h2><ul><li>缺少MP3、flac等音频格式支持</li></ul><h2 id="总结">4.4 总结</h2><p>总的来说stm32f407性能与速度较快但还不够快，尤其在动画的显示与音频解码这种实时性较强的多任务表现较弱，而且若需要对项目进行扩展，其速度可能更加不够。</p><p>下一步将会尝试使用速度更快的单片机(如esp32，stm32h7)，以及使用上RTOS这种实时性强的系统（如freertos）。</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>硬件</tag>
      
      <tag>stm32</tag>
      
      <tag>HIFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用HEXO和GitHubPage搭建Blog</title>
    <link href="/2024/12/31/24_12_31_make_blog_hexo/"/>
    <url>/2024/12/31/24_12_31_make_blog_hexo/</url>
    
    <content type="html"><![CDATA[<h1 id="简述">简述</h1><p>大部分人印象中的网站常常都遥不可及，但是现在资源丰富的互联网早就已经给了解网站提供了很多信息渠道与免费资源。</p><p>如题所言，本文将使用<ahref="https://hexo.io/zh-cn/">hexo(一个博客框架)</a>与<ahref="https://pages.github.com/">GitHubPage</a>（一个页面托管平台）来搭建一个博客，我也不会去仔细深究网站背后的工作原理，主要一笔带过。</p><p>若想搭建博客，就得先搭建一个网站，之后在这个网站框架下再加入新内容，所以本文分四步步，</p><ul><li>先使用github来搭建静态页面（<ahref="https://blog.csdn.net/xgb2018/article/details/114079542">什么是静态页面？</a>）</li><li>然后再搭建hexo框架来创建博客</li><li>上传博客</li><li>最后再hexo中更换博客的主题以及如何写作。</li></ul><h1 id="搭建页面">1.搭建页面</h1><h2 id="注册github账号">1.1注册GitHub账号</h2><p>打开<a href="https://github.com">Github</a> <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/0ba11813f9fddf6a.webp" />找到右上角Sign up按钮 ，点击后按照引导注册。</p><p>（什么？看不懂英文？。。。）</p><p>注册完毕后登录。</p><h2 id="创建仓库">1.2创建仓库</h2><p>登陆后找到顶端加号按钮，点击。 <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/ae9505cf4b8b0655.webp" /></p><p>然后再点击New repository <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/6f7c92e8861fe185.webp" /></p><p>如下界面，根据提示自行填写，但public选项一定要勾选。（这里的repositoryName为仓库名，需要记住） <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/e8f1cc4b092b4bdd.webp" /></p><p>创建完后跳到这个页面，我们可以在这个仓库里上传代码或其他文件，由于我们创建网站，我们必须要创建一个<code>index.html</code>作为网站的首页。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/a994db7a52259e85.webp" /></p><p>为了创建这个文件，我们可以新建一个文本文件（txt）,输入以下代码<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Jiangno test<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure></p><p>之后另存为index.html(<strong>注意：文件后缀名为html而不是txt</strong>)</p><p>这时我们就可以点击图中的超链接来上传<code>index.html</code> <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/a994db7a52259e85.webp" /></p><h2 id="设置github-page">1.3设置github page</h2><p>点击仓库界面菜单的<code>Settings</code> <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/db44c6c9bbf8d689.webp" /></p><p>在左侧点击<code>Pages</code></p><p>将Branch下的设置改为如图。 <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/e833741cebb363ba.webp" />之后等待几分钟，刷新一下页面，就会变为下图 <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/006f2b39657259ba.webp" />此时点击visit site按钮就可以访问我们自己的页面了！ <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/e5824ce79a0b9e8d.webp" /></p><p><strong>这里的域名就是 Github用户名+github.io/仓库名的格式</strong></p><h2 id="小结">1.4小结</h2><p>所以这么一个静态页面的网站就是由一个html文件来支撑的，每次更新网站就是对html文件的更新，这样的缺点就是无法进行评论，点赞之类需要数据库的操作，所以想要更新页面只能手动操作，这就是githubpage的缺点。</p><h1 id="hexo框架">2.HEXO框架</h1><h2 id="简介">2.1简介</h2><p>如第一节所说，我们若是每次都要手动去修改这些html文件显然是低效率的，我们应该专注于文章本身而非代码，所以使用hexo可以将<code>.md</code>文件(md全称markdown,是用来写文章的一门简单的标记语言，熟练之后写文章效率较高。)转换为一个个html文件，并生成不同的分类页面，自动归档等功能。</p><p>我们可以简单的理解hexo为一个将md文件转化为html的工具，这个工具需要搭建在自己的电脑上。正如c语言代码需要C编译器，hexo使用nodejs编写的自然就需要nodejs运行环境。</p><h2 id="安装node.js">2.2安装Node.js</h2><p>下载<ahref="https://nodejs.org/zh-cn">node</a>(点击超链接)，下载安装包，按照指示安装（什么？你不会安装。。。）</p><p>安装完毕打开命令行</p><p>win+r键 打开<code>运行</code> 输入cmd即可 回车打开一个黑色框框。</p><p><imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/d84aae75a2dacc90.webp" /></p><p>输入<code>node -v</code>出现如图软件版本号就可以了。</p><h2 id="安装hexo">2.3安装hexo</h2><p>先随地新建一个文件夹</p><p>打开之后 右击 <imgsrc="https://s3.bmp.ovh/imgs/2024/11/09/ad2fb316346a637b.webp" />在终端中打开。 输入<code>npm init -y</code>来初始化项目。之后输入<code>npm install hexo-cli -g</code>这是一个hexo脚手架工具，安装之后可以快速初始化hexo博客环境。（如果npm install 半天安装不好那多半是你被墙了，解决方法可以尝试输入以下代码<code>npm config set registry https://registry.npmmirror.com</code>）</p><p>安装完脚手架工具可以在刚刚的文件夹中输入以下命令<code>hexo init blog</code>这句代码指的是创建blog文件夹，然后初始化为hexo项目，输入完效果如图。（注意，此处可能需要git,以及魔法上网，安装git详见2.4 Git的安装） <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/eb2d18bd6816cccf.webp" /></p><p>在这个文件夹下，打开终端，输入 <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hexo</span> g <span class="hljs-comment">#生成页面</span><br>hexo s <span class="hljs-comment">#开启本地服务器</span><br></code></pre></td></tr></table></figure>就会出来一个localhost:4000,此时在浏览器输入<code>http://localhost:4000</code>就可以访问到本地的页面。</p><h2 id="git的安装">2.4 Git的安装</h2><p>由于需要git,所以讲解git的安装</p><p>打开git网站下载（<ahref="https://git-scm.com/downloads/win">git下载</a>）</p><p>无脑安装之后 按下win+r键 输入cmd 打开命令行</p><p>按格式输入以下命令 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;GitHub的用户名&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;GitHub的邮箱&quot;</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;GitHub的邮箱&quot;</span><br></code></pre></td></tr></table></figure></p><p>之后会生成一段ssh密钥在<code>[C:\Users\用户名\.ssh]</code>这个文件夹下，文件名为：<code>id_rsa.pub</code>打开之后复制里面的所有东西。</p><p>打开GitHub，登录， <imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/f70943826678204b.webp" />点击头像，打开<code>Settings</code> 打开<code>SSH and GPG Keys</code><imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/1ecba85c22356849.webp" /></p><p>点击<code>New SSH Key</code>新建一个，名字随便取，按照提示，把刚才复制的Key填写进去确认，之后就可以了。到此，git设置完毕。</p><h2 id="小结-1">2.5 小结</h2><p>现在，你已经安装好了hexo,已经可以在本地搭建一个博客系统了，因为hexo需要git工具，所以你安装了git,接下来将会讲解如何将hexo生成的页面通过git更新到github仓库中。</p><h1 id="部署页面">3.部署页面</h1><p>为了部署页面，我们需要需要一个上传工具，这个工具同样使用nodejs编写，打开博客文件夹的终端，输入以下代码来安装 <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></p><p>安装完毕，我们打开博客的配置文件<code>_config.yml</code>（此文件在博客文件夹下。）翻到最后，找到<code>deploy:</code></p><p>将deploy这片内容换为如下： <figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//github.com/GitHub的用户名/githubPage的仓库名.git</span><br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure></p><p>在部署之前我们还要设置一下hexo的域名在配置文件中找到<code>url:</code>将其冒号后的网址改为你的githubpage域名（一般是<code>github用户名.github.io/仓库名</code>）</p><p>之后，回到博客文件夹终端输入 <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure> 来部署到githubpage,稍等片刻你就可以通过<code>github用户名.github.io/仓库名</code>来访问你的hexo博客。</p><h1 id="博客操作">4.博客操作</h1><h2 id="博客设置">4.1博客设置</h2><p>我们可以在配置文件<code>_config.yml</code>进行各种网站的配置，配置文件的解释可以移步到hexo官方文档<ahref="https://hexo.io/zh-cn/docs/configuration">配置</a></p><h2 id="博客个性化">4.2博客个性化</h2><p>hexo是一个开源博客系统，任何人都可以创建自己的主题，你可以在百度，论坛等地方找到hexo的主题，这里以fluid为例配置一个主题。（本博客使用的就是<ahref="https://fluid-dev.github.io/hexo-fluid-docs/">fluid主题</a>）</p><p>首先，下载主题包，我们下载<ahref="https://github.com/fluid-dev/hexo-theme-fluid/releases">fluid-theme</a></p><p>下载完后的压缩文件解压，出来一个文件夹，这个文件夹就是主题，把这个文件夹放到博客下的themes文件夹，<em>注意：是一整个文件夹放到themes而非文件夹里的内容分开放</em><imgsrc="https://s3.bmp.ovh/imgs/2024/12/31/1c7e4a159050c273.webp" /></p><p>然后将这个主题文件夹改为fluid。</p><p>此时，我们放好了主题，但是hexo还没有设置，所以我们到配置文件<code>_config.yml</code>下，找到<code>theme:</code>将冒号后改为fluid就可以了。</p><p>接下来，我们需要重新生成一下页面，输入<code>hexo g</code>再输入<code>hexo s</code>运行一下本地服务器来预览一下。</p><p><strong>需要注意的是hexo主题还有一个主题自己的配置文件，也叫做_config.yml,在主题文件夹下，可以进行主题相关的配置</strong></p><h2 id="写文章">4.3写文章</h2><p>说了这么多，<strong>怎么写一篇文章呢？？？？</strong></p><p>在hexo博客文件夹下 <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>node_modules<br><span class="hljs-bullet">- </span>public<br><span class="hljs-bullet">- </span>scaffolds<br><span class="hljs-bullet">- </span>source<br><span class="hljs-bullet">- </span>themes<br></code></pre></td></tr></table></figure>文件夹列表中有一个source文件夹,source中有一个_posts文件夹，里面即为<code>.md</code>文件，初始里面有一个hello_world.md,你可以通过修改这个文件来尝试体验markdown语法，之后若想要创建新文章，就可以新建md文件，按照hello_word.md的格式以及markdown的语法来写文章。<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br><span class="hljs-section">title: Hello World</span><br><span class="hljs-section">---</span><br>Welcome to [<span class="hljs-string">Hexo</span>](<span class="hljs-link">https://hexo.io/</span>)! This is your very first post. Check [<span class="hljs-string">documentation</span>](<span class="hljs-link">https://hexo.io/docs/</span>) for more info. If you get any problems when using Hexo, you can find the answer in [<span class="hljs-string">troubleshooting</span>](<span class="hljs-link">https://hexo.io/docs/troubleshooting.html</span>) or you can ask me on [<span class="hljs-string">GitHub</span>](<span class="hljs-link">https://github.com/hexojs/hexo/issues</span>).<br></code></pre></td></tr></table></figure></p><p>写完文章后，就是惯例的<code>hexo g</code> <code>hexo s</code><code>hexo d</code>。</p><h1 id="结语">5.结语</h1><p>hexo与githubpage只适用于轻量级的小网站，但是已经足够普通博客使用了，更多关于hexo的内容可以查看hexo的<ahref="https://hexo.io/zh-cn/">官方文档</a></p>]]></content>
    
    
    <categories>
      
      <category>网站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>hexo</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES9018k2m解码板</title>
    <link href="/2024/12/20/24_12_20_ess9018/"/>
    <url>/2024/12/20/24_12_20_ess9018/</url>
    
    <content type="html"><![CDATA[<figure><img src="https://s3.bmp.ovh/imgs/2024/12/20/176f2322cc3351bc.webp"alt="ES9018K2M" /><figcaption aria-hidden="true">ES9018K2M</figcaption></figure><h1 id="dac部分">1.DAC部分</h1><h2 id="芯片介绍">1.1芯片介绍</h2><p>ES9018K2M是一款ESS公司开发的高性能32位、两声道音频DAC，最高支持384kHz的PCM数据以及DSD-11.2MHz，具有+127dBDNR动态范围，另外，其拥有较低的功耗，所以常在移动设备上应用。</p><h2 id="芯片输入">1.2芯片输入</h2><p>PCM音频数据通过I2S协议输入，若需控制音量等其他功能则通过I2C协议。由于其默认音量为100%，所以无需I2C连接也可以直接输出音频信号。</p><h2 id="芯片输出">1.3芯片输出</h2><p>芯片音频为差分输出，所以之后还要对差分型号进行处理，转为单端信号。</p><h2 id="芯片电源">1.4芯片电源</h2><p>由于其为dac，所以需要对digital（数字）部分单独电源，以及analog(模拟)部分单独电源，芯片上还额外需要一个VCCA,所以一共为3个电源。如图：<img src="https://s3.bmp.ovh/imgs/2024/12/20/ba62017ee8bfdca5.webp" />pcb上还需要对电源的滤波，其余元件基本为电容。 <imgsrc="https://s3.bmp.ovh/imgs/2024/12/20/aa83b883d95e7211.webp" /></p><h1 id="运放部分">2.运放部分</h1><h2 id="运放芯片介绍">2.1运放芯片介绍</h2><p>JRC4580，内部包括有两个独立的、高增益、低噪声，输出电流大，低失真的运算放大器，适合于音频前置放大部分和有源滤波器，大电流输出的耳机放大器，<imgsrc="https://s3.bmp.ovh/imgs/2024/12/20/3c1a7d70e73c6dbe.webp" /></p><h2 id="运放输入与输出">2.2运放输入与输出</h2><p>运放部分为纯纯的模拟电路，此部分目前为借鉴电路，作用为差分转单端信号，随后进行一个放大与低通滤波（主要滤除20000HZ以上高频信号），这里的电容需要用NG0材质的电容，暂时不知道原因。<imgsrc="https://s3.bmp.ovh/imgs/2024/12/20/2f0c2f1c35d4af26.webp" /></p><h2 id="运放电源">2.3运放电源</h2><p>由于音频信号电压有正有负，则需要正负电源给运放供电，此处供电为正负12v。</p><p>（正负电源挖坑。。）</p><h2 id="pcb总体设计">3.PCB总体设计</h2><ul><li>区分数字地与模拟地，数字地与模拟地用0Ω电阻连接。</li><li>注意滤波电容先过大再过小。</li></ul><p><imgsrc="https://s3.bmp.ovh/imgs/2024/12/20/c5e2026a80e8d6a2.webp" /></p>]]></content>
    
    
    <categories>
      
      <category>EDA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PCB</tag>
      
      <tag>EDA</tag>
      
      <tag>HIFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32F407时钟系统解析</title>
    <link href="/2024/11/29/24_11_29_STM32F407Clock/"/>
    <url>/2024/11/29/24_11_29_STM32F407Clock/</url>
    
    <content type="html"><![CDATA[<h1 id="stm32f407时钟系统框图">1. STM32F407时钟系统框图</h1><p><imgsrc="https://s3.bmp.ovh/imgs/2024/11/29/f791f9f512843529.webp" /></p><p>时钟作为一个单片机的脉搏，有必要好好了解一下。</p><h2 id="为什么时钟需要被分为许多频率">1.1为什么时钟需要被分为许多频率？</h2><p>在传统51单片机中，一般只有一个时钟频率，而stm32有多个分频有以下原因：- 减小功耗 - 为了增强抗干扰能力 - 为了给不同外设提供时钟</p><h2 id="f407的时钟来源">1.2 F407的时钟来源</h2><ul><li>LS IRC：低速内部时钟(32Khz 内部RC震荡产生可提供给：看门狗、RTC)</li><li>LSE DSC：低速外部时钟（32.768KHz可提供给：RTC）</li><li>HSI RC：高速内部时钟 （16MHz内部RC产生可提供给：系统时钟、PLL）</li><li>PLLCLK：锁相环时钟输出，分为PLL（可提供给：系统、USBOTG）与PLLI2S（可提供给：I2S（音质需求））</li><li>HSE OSC：高速外部时钟（4-26Mhz 外接晶振可提供给：RTC、输出引脚（PA8（MCO1）,PC9（MCO2）））</li></ul><p><strong>提供给PLLCLK的时钟可能来源如下：</strong> - HSI - HSE</p><p><strong>提供给系统的时钟可能来源如下：</strong> - HSI - HSE -PLLCLK</p><p><strong>MCO1的可能来源</strong> - HIS - LSE - HSE - PLL</p><p><strong>MCO2的可能来源</strong> - HSE - PLL - SYSCLK - PLLI2S</p><p><strong>如何计算PLLCLK：</strong></p><p>无论HSI或HSE作为PLLCLK时钟来源，都首先经过/M的分频 如图然后经过xN、/p输出PLLCLK即如下公式（<spanclass="math inline">\(f\)</span>为HSI或HSE输入）:</p><p><span class="math display">\[ PLLCLK = \frac{f}{M} \times \frac{N}{P}\]</span></p><p>若使用8Mhz外部时钟则系统运行频率：</p><p><span class="math display">\[ PLLCLK = \frac{8Mhz}{8} \times\frac{336}{2} = 168(Mhz) \]</span></p><h2 id="系统时钟的去向">1.3系统时钟的去向</h2><p>SYSCLOCK去向： - 以太网RTP时钟 - AHBPRESC -APBPRESC(APB1、APB2)在AHB分频之后</p><h1id="f4固件库中systeminit时钟系统初始化函数">2.F4固件库中SystemInit()时钟系统初始化函数</h1><p>调用时机：在系统复位之后，在执行main函数之前。</p><p>基本为RCC寄存器的配置，如：使能时钟源、读取就绪状态、重置寄存器、关闭所有系统中断、启动CSS时钟安全寄存器。</p><h2 id="初始化之后的状态">2.1 初始化之后的状态</h2><ul><li>SYSCLOCK:168Mhz</li><li>AHB:168Mhz</li><li>APB1:42Mhz</li><li>APB2:84Mhz</li><li>PLL:168Mhz</li></ul><p>初始化之后若需要获取系统频率，可以访问SystemCoreClock变量来得到</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>stm32</tag>
      
      <tag>时钟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录制作的一款全地形小车（暨第一次大学比赛）</title>
    <link href="/2024/11/10/24_11_10_competition/"/>
    <url>/2024/11/10/24_11_10_competition/</url>
    
    <content type="html"><![CDATA[<h1 id="1-起始"><a href="#1-起始" class="headerlink" title="1.起始"></a>1.起始</h1><p>从进入大学前，我就一直想进入实验室参加各种比赛，最终我进入了学校的电子实验室，开始了我的电子信息学习。</p><p>但是，在进入实验室不久，基本只是将51单片机学完，stm32没学完的情况下，就被实验室赋予了第一次任务，参加全地形车比赛。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/6063f02df162cc92.webp" alt="我与履带车见的第一面"></p><p>这是我与履带车见的第一面，本来以为还要很久才能用上，没想到这次就要“深入交流了”。</p><h1 id="2-构思"><a href="#2-构思" class="headerlink" title="2.构思"></a>2.构思</h1><p>既然都使用上履带车了，在硬件方面应该不需要大改了（我以为。。。）。那么接下来就考虑的是主控选型。</p><h2 id="2-1主控"><a href="#2-1主控" class="headerlink" title="2.1主控"></a>2.1主控</h2><p>我觉得如果要设计一款产品，其实团队会什么是占很大一部分，下面简介以下队员：</p><ul><li>队员1：我（会51,了解stm32,比较能动手）</li><li>队员2：只会51</li><li>队员3：只略懂stm32</li></ul><p>那么在我只会两款单片机的情况下（51与stm32）可选的情况显然不多，再加上我对stm32的理解不够深刻以及队员大部分只掌握了51单片机，所以我选择了51单片机作为主控，再加上我正好有一块寻迹小车51主板，那么主控显而易见。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/d1b92f718ed1f309.webp" alt="51主板"></p><h2 id="2-2其他硬件"><a href="#2-2其他硬件" class="headerlink" title="2.2其他硬件"></a>2.2其他硬件</h2><p>主控已经确定，那么作为一项需要循迹、爬坡和过各种障碍的全地形车，走直线以及找路就成为了本任务的重点了。</p><hr><p>在找路方面，我使用了八路灰度传感器<br><img src="https://s3.bmp.ovh/imgs/2024/11/10/8c74db7f9b89029d.webp" alt="八路灰度传感器"></p><p>足够我进行十字路口和直角转弯了。</p><hr><p>在走直线方面，我使用了mpu6050陀螺仪（偏航角）加以循迹的辅助，最终在障碍、爬坡、平地寻线和无线可循的情况下都实现了在一定误差内走直线的效果。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/5706ac7c4192fcdf.webp" alt="mpu6050"></p><p>既然都使用了陀螺仪，那么姿态解算这项任务，51单片机的性能很显然不够，此时便必然要使用stm32。</p><p>为了显示偏航角，便又加上了OLED（1306）小屏幕</p><hr><p>在电源方面，本打算使用航模电池，但是由于能找到的电池全部鼓包以及价格过高，便使用了售卖的成品电池（自带充电线，电源线，比较方便）</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/52089c1b7e98cc72.webp" alt="蓝色即为电池"></p><p>电池为12v输出，我在多次修改之后使用了3个降压模块（太多了，可以简化）分别作为：</p><ul><li>主控3.3v</li><li>电机编码器5v</li><li>电机驱动7v</li></ul><p><strong>电机驱动为7v是为了更快速的反应。</strong></p><hr><p>在机械结构方面，由于电池重量使得车辆重心偏移，车辆在上坡时会向后仰然后翻过去于是我每次都需要用手扶以下，那么我就将这项工作交给了车辆的“小尾巴”。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/70f3cb6cf7149b1c.webp" alt="尾巴"></p><p>而且车辆在不使用任何软件算法的情况下，会偏航，于是我尝试更换了车辆的履带以及编码器电机（主要是为了另一个编码器电机上的轴）来尝试改进。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/a44cbb94e8d0e8fa.webp" alt="change motor"></p><p>（好难拆，于是买了一套棘轮螺丝刀。。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/7d285a20c34a5dc3.webp"></p><hr><p>在轮子方面，我将原来缺少的减震弹簧补全，使车身过障碍时减小抖动。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/be6ccab4e304a8f5.jpg" alt="spring"></p><hr><p>在电机驱动方面，我本想使用L298N,实际上也确实使用L298N，优点如下：</p><ul><li>耐压值高</li><li>具有降压供能</li><li>使用简单</li></ul><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/c82003e8449057ea.webp" alt="L298N为红色"></p><p>但是我并未使用，反而我使用了TB6612</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/8ab1b0ca2338625a.png" alt="TB6612"></p><p>主要时体积小，也对其不太了解，想尝试一下。</p><p>最终，成功烧毁。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/fb7240f1eca826b8.webp" alt="烧毁"><br>左侧为烧毁的tb6612,由于焊死，取不下来了，所以为了防止再次需要更换，我在右侧焊接了母座来防止再次烧毁的更换。</p><hr><h2 id="2-3电气连接"><a href="#2-3电气连接" class="headerlink" title="2.3电气连接"></a>2.3电气连接</h2><p>很显然，作为一名新电子信息人，制作一块自己的pcb显然略显不成熟，于是我采用了简单粗暴的洞洞板，并进行了简单布局（实际一点都不简单），布局在后续的模块修改中更换了许多次，吸了不少铅（焊烟。。。）</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/81949802b12378a2.webp" alt="最初的布局"></p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/dac941846af27728.webp" alt="最初的布局（实际）"></p><p>于是我进行了焊接。</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/10/3023ca7c55524870.webp" alt="焊接"></p><p>第一次焊洞洞板。实属难看。</p><p>多次修改后就变为如下布局及焊接。<br><img src="https://s3.bmp.ovh/imgs/2024/11/23/f3898930f559040e.webp"></p><h1 id="3-结果"><a href="#3-结果" class="headerlink" title="3.结果"></a>3.结果</h1><p>在比赛测试时，发现了一个致命问题，由于赛道中阶梯上表面为磨砂材质且小车履带的塑料材质以及其包裹的一层布无法提供足够的摩擦力，<br>使得无法完美的上阶梯，于是我开始对履带进行改造，使用了不同双面胶，磨砂胶带，去除履带外层，有一点效果，可是由于没有粘性足够的胶将其粘在履带上，使得履带与外层任何胶带都不同步，甚至一度卡住车轮，<br>最终在比赛前，我去除了所有胶带，但是为了提供一点摩擦力，我又贴了一些双面胶，起到了一点作用，但在开赛时，出现了另一个致命问题。</p><p>在发车时，一切顺利。但在第一个路口便出现了不对劲，小车没有循迹到第一个十字路口，导致第一个上坡就卡住。于是我拿回小车，紧急调整循迹灵敏度，最终调整完毕，但损失了太多时间。</p><p>我开始了第二次发车，开头仍较为顺利，但在上阶梯式，仍被卡住，在比赛时我没有找到原因，复盘后发现由于我在赛前对车的“小尾巴”增加了一些胶带，导致了小车在上台阶后仰时被胶带增加了过多摩擦力（此处也有可能由于履带摩擦力的原因）最终导致了以下结果</p><ul><li>小车上坡吃力</li><li>小车下坡左偏</li></ul><p>连续两次发车都遭遇此问题。</p><p>最终，我开始了第四次发车，这次运气不错，过去了阶梯，接下来本应顺利再过几个障碍，可是时间所剩为零，最终，这次比赛成为了一次，彻彻底底，善始不善终的比赛，同时也浪费了我在软件上的努力。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p>这次比赛，很显然，循迹、履带及尾部支撑都为硬件问题，足以体现我在硬件上缺少足够的考虑、足够的测试和足够的验证。<br>那么在实验室测试时没有发现这些问题的原因我总结为场地元素不够标准，本次不够标准的地方就在于忽略了阶梯上表面的材质，下次测试时需重视测试元素以及测试规范。</p><p>在比赛时，不应对车身进行大改，需要将这些问题尽量在赛前测试出来，即使需要改动也要尽量小范围修改。<br>修改完一定要进行测试再上场（这就是产生我本次循迹问题的原因）。</p><p>此次比赛时间不够也是我未完赛的原因之一，在有时间限制的比赛中，一定要注意对时间的把控，减少失误时刻。</p><p>虽然此次比赛较为失败，但是失去一些东西时，总会得到一些东西，经验是最宝贵的东西。</p><p>引用一句话：</p><p><em>人类活动具有不可预测的复杂性。在我们尝试之前，大多数手工艺看起来都很简单，但自己动手就不是一回事儿了。甚至当我们对某一行业驾轻就熟时，也总会有一些意想不到的挑战，把我们送进一个全新的试炼场。</em></p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>51单片机</tag>
      
      <tag>硬件</tag>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node编写命令行工具</title>
    <link href="/2024/11/09/24_11_9_nodeCLI/"/>
    <url>/2024/11/09/24_11_9_nodeCLI/</url>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h1><p>最近在写博客时要插入图片，受限于网站带宽，不可能使用上兆大小的图片，所以就需要一个程序来处理高质量的jpg，png图片，所以我便编写了一个命令行工具。此处记录如何创建node的命令行工具，并且直接调用。</p><p>示例：<code>hwebp -i ./yourdir</code></p><h1 id="2-创建"><a href="#2-创建" class="headerlink" title="2.创建"></a>2.创建</h1><h2 id="2-1初始化项目"><a href="#2-1初始化项目" class="headerlink" title="2.1初始化项目"></a>2.1初始化项目</h2><p>创建一个文件夹，并使用命令行工具打开（windows上）。<br><img src="https://s3.bmp.ovh/imgs/2024/11/09/ad2fb316346a637b.webp"></p><p>输入<code>npm init -y</code>来初始化</p><p>此时会创建以下项目<br><img src="https://s3.bmp.ovh/imgs/2024/11/09/8c2867ed155db42a.webp"><br>此时初始化已完成。</p><h2 id="2-2修改package-json"><a href="#2-2修改package-json" class="headerlink" title="2.2修改package.json"></a>2.2修改package.json</h2><p>点进去后发现以下内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;test&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>我们需要在文件的第一个大括号内加入以下代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JSON"><span class="hljs-punctuation">&#123;</span><br>...<br><span class="hljs-attr">&quot;bin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hwebp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;./app.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>bin</code>中存放的是你的命令的名字，<code>hwebp</code>就是命令名字，<code>./app.js</code>就是要执行的文件。<br>但此时我们在命令行中输入<code>hwebp -i ./yourdir</code>仍然不行，我们需要告诉操作系统，执行这个文件的程序是什么，在node中即为node.js。</p><h2 id="2-3声明执行程序"><a href="#2-3声明执行程序" class="headerlink" title="2.3声明执行程序"></a>2.3声明执行程序</h2><p>打开app.js<br>若操作系统为windows，在app.js第一行加入<code>#!node</code><br>若操作系统为linux,在app.js第一行加入<code>#!/usr/bin/env node</code></p><h2 id="2-4npm安装自己的命令行工具"><a href="#2-4npm安装自己的命令行工具" class="headerlink" title="2.4npm安装自己的命令行工具"></a>2.4npm安装自己的命令行工具</h2><p>此时保存好自己的修改，再次打开app.js所在文件夹的命令行，输入<code>npm link</code>就可以安装自己的工具了。</p><p>接下来，随便在哪个文件夹的命令行中就可以使用自己的命令行工具了。<br><img src="https://s3.bmp.ovh/imgs/2024/11/09/7c2181b80338cedd.webp"></p>]]></content>
    
    
    <categories>
      
      <category>nodejs</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记第一次打PCB（51核心板）</title>
    <link href="/2024/11/09/24_11_8_PCB/"/>
    <url>/2024/11/09/24_11_8_PCB/</url>
    
    <content type="html"><![CDATA[<h1 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h1><p>最近在焊洞洞板时，属实是觉得难焊，而且布局十分困难，于是便产生了学EDA的想法。</p><p>于是我忙里偷闲，迅速入门了嘉立创EDA。</p><h1 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h1><p><img src="https://s3.bmp.ovh/imgs/2024/11/09/3ef0e3adf862bf9e.webp"></p><p>其实当我开始画原理图时，发现外围电路其实芯片手册上已基本覆盖，所以并没用碰到许多困难。</p><p>所以芯片手册是非常重要的。</p><h1 id="PCB布线"><a href="#PCB布线" class="headerlink" title="PCB布线"></a>PCB布线</h1><p><img src="https://s3.bmp.ovh/imgs/2024/11/09/57d982f0318ef07d.webp"></p><p>PCB学到了这么几点</p><ul><li>走线不可出现锐角，尽量使用135°角</li><li>电源线加粗</li><li>少使用过孔</li><li>差分信号线注意等长</li><li>晶振注意不可放在板子边缘，注意包地</li><li>丝印一定要清晰！！</li></ul><p><img src="https://s3.bmp.ovh/imgs/2024/11/09/8058c02b52d5fba2.webp"></p><h1 id="实物图"><a href="#实物图" class="headerlink" title="实物图"></a>实物图</h1><p>最后放几张实物图吧，等我空了再来焊接元件（嘉立创BOM好贵。。）</p><p><img src="https://s3.bmp.ovh/imgs/2024/11/09/2ce07c4eadcd1344.webp"></p><p><img src="https://s3.bmp.ovh/imgs/2024/11/09/17f8814569e1e339.webp"></p>]]></content>
    
    
    <categories>
      
      <category>EDA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51单片机</tag>
      
      <tag>PCB</tag>
      
      <tag>EDA</tag>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次51单片机外部中断问题</title>
    <link href="/2024/11/02/24_11_2_it_problem/"/>
    <url>/2024/11/02/24_11_2_it_problem/</url>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h1><p>由于最近正在做全地形小车，为了获取小车的两个编码器电机速度，所以我便想到了使用51单片机的外部中断进行计数，于是我便操作寄存器开启了单片机的外部中断。  </p><p>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Ex0_Init</span><span class="hljs-params">()</span><br>&#123;<br>IT0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//中断模式设置(1:下降沿触发， 0:低电平触发</span><br>EX0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//使能外部中断0</span><br>EA = <span class="hljs-number">1</span>; <span class="hljs-comment">//开总中断</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Ex1_Init</span><span class="hljs-params">()</span><br>&#123;<br>IT1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//中断模式设置(1:下降沿触发， 0:低电平触发</span><br>EX1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//使能外部中断1</span><br>EA = <span class="hljs-number">1</span>; <span class="hljs-comment">//开总中断</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-问题"><a href="#2-问题" class="headerlink" title="2.问题"></a>2.问题</h1><p>在我开启了两个中断之后，我给下降沿低电平测试，结果发现中断0可以正常工作，中断1死活不能正常工作。于是我尝试更换了单片机芯片，仍然无法解决问题，此时我便排除了芯片问题。那么下一步我便更换了51开发板，发现仍然无法解决问题。此时我便排除了板子的电路问题。</p><p>那么硬件问题全部排除，最终只剩下一种可能。便是软件问题。</p><h1 id="3-解决"><a href="#3-解决" class="headerlink" title="3.解决"></a>3.解决</h1><p>我便翻出stc89c52rc的文档，找出了中断1初始化的配置，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//External interrupt service routine</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  IT1 = <span class="hljs-number">1</span>;<br>  EX1 = <span class="hljs-number">1</span>;<br>  EA = <span class="hljs-number">1</span>;<br><br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>寥寥几行代码，我复制粘贴然后尝试，仍然无法解决。</p><p>此时，我就排除了初始化函数的问题。</p><p>于是我将所有其他函数全部注释。只留下中断，发现能够正常运行！经过我的排查，在我的程序中开启了一个定时器，这个定时器隔一段时间就会运行，然后打断外部中断。</p><p>到此，问题就浮出水面。</p><p>我将外部中断初始化改为以下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;REGX52.H&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Ex0_Init</span><span class="hljs-params">()</span><br>&#123;<br>IT0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//中断模式设置(1:下降沿触发， 0:低电平触发</span><br>EX0 = <span class="hljs-number">1</span>;<span class="hljs-comment">//使能外部中断0</span><br>EA = <span class="hljs-number">1</span>; <span class="hljs-comment">//开总中断</span><br><br><br>PX0 = <span class="hljs-number">1</span>;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Ex1_Init</span><span class="hljs-params">()</span><br>&#123;<br>IT1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//中断模式设置(1:下降沿触发， 0:低电平触发</span><br>EX1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//使能外部中断1</span><br>EA = <span class="hljs-number">1</span>; <span class="hljs-comment">//开总中断</span><br><br><br>PX1 = <span class="hljs-number">1</span>;        <br>&#125;<br></code></pre></td></tr></table></figure><p>代码中<code>px1 = 1;</code>与<code>px0 = 0;</code>为新增代码。</p><p>这两句代码给外部中断配置了优先级，使其不被定时器中断打扰。程序正常运行！问题解决。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h1><p><strong>在51单片机中使用多个中断时，务必考虑优先级。</strong><br><strong>在配置任何外设时，务必配置完整，使外设可控。</strong></p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51单片机</tag>
      
      <tag>中断</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51单片机串口uart串口初步学习</title>
    <link href="/2024/09/08/24_9_8_UART/"/>
    <url>/2024/09/08/24_9_8_UART/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机串口uart串口初步学习"><a href="#51单片机串口uart串口初步学习" class="headerlink" title="51单片机串口uart串口初步学习"></a>51单片机串口uart串口初步学习</h1><h2 id="1-什么是串口"><a href="#1-什么是串口" class="headerlink" title="1.什么是串口"></a>1.什么是串口</h2><ul><li>一种应用十分广泛的通讯接口，可以使单片机与单片机，单片机与电脑或者模块之间互相通信。</li><li>UART（通用异步收发器）</li></ul><p>这是其中一种串口接口</p><p><img src="https://s3.bmp.ovh/imgs/2024/09/08/0c5baee9f0abfd36.png" alt="DB9"></p><p>但我们在笔记本上常用usb转串口（CH340）来连接uart。</p><h2 id="2-如何连接串口"><a href="#2-如何连接串口" class="headerlink" title="2.如何连接串口"></a>2.如何连接串口</h2><h3 id="2-1连接方式"><a href="#2-1连接方式" class="headerlink" title="2.1连接方式"></a>2.1连接方式</h3><pre><code class="hljs">VCC-VCCTXD-RXDRXD-TXDGND-GND</code></pre><p><strong>注意：TXD与RXD交叉连接；若单向数据传输可以只连接一根线；当电平标准不一致时，需要电平转换芯片（如RS232，RS485，TTL）</strong></p><p>以下为电平标准介绍：</p><p><img src="https://s3.bmp.ovh/imgs/2024/09/08/072c183f84a1340a.png"></p><h2 id="3-其他通信接口介绍"><a href="#3-其他通信接口介绍" class="headerlink" title="3.其他通信接口介绍"></a>3.其他通信接口介绍</h2><table><thead><tr><th align="center">名称</th><th align="center">引脚</th><th align="center">通信方式</th><th align="center">特点</th></tr></thead><tbody><tr><td align="center">uart</td><td align="center">TX,RX</td><td align="center">全双工，异步</td><td align="center">点对点</td></tr><tr><td align="center">I2C</td><td align="center">SCL,SDA</td><td align="center">全双工，同步</td><td align="center">可挂载多个设备</td></tr><tr><td align="center">SPI</td><td align="center">SCLK,MOSI,MISO,CS</td><td align="center">全双工，同步</td><td align="center">可挂载多个设备</td></tr><tr><td align="center">1—Wire</td><td align="center">DQ</td><td align="center">全双工，同步</td><td align="center">可挂载多个设备</td></tr></tbody></table><p><strong>此外还有can总线，USB等。</strong></p><h2 id="4-51单片机的UART"><a href="#4-51单片机的UART" class="headerlink" title="4. 51单片机的UART"></a>4. 51单片机的UART</h2><p> STC89C52 只有一个UART</p><p>  其工作模式有四种</p><ul><li>模式0：同步移位寄存器</li><li>模式1：8位UART，波特率可变</li><li>模式2：9位UART，波特率固定</li><li>模式3：9位UART，波特率可变</li></ul><p>常用模式为模式1。</p><p>以下为串口模式图：</p><p><img src="https://s3.bmp.ovh/imgs/2024/09/08/6bda7f58d60a3f78.png"></p><p>以下为完整模式图：</p><p><img src="https://s3.bmp.ovh/imgs/2024/09/08/1a7803435fb614b3.png"></p><p>接下来即配置寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">UartInit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><span class="hljs-comment">//9600bps@11.0592MHz</span><br>&#123;<br>PCON &amp;= <span class="hljs-number">0x7F</span>;<span class="hljs-comment">//波特率不倍速</span><br>SCON = <span class="hljs-number">0x50</span>;<span class="hljs-comment">//8位数据,可变波特率</span><br>AUXR &amp;= <span class="hljs-number">0xBF</span>;<span class="hljs-comment">//定时器1时钟为Fosc/12,即12T</span><br>AUXR &amp;= <span class="hljs-number">0xFE</span>;<span class="hljs-comment">//串口1选择定时器1为波特率发生器</span><br>TMOD &amp;= <span class="hljs-number">0x0F</span>;<span class="hljs-comment">//清除定时器1模式位</span><br>TMOD |= <span class="hljs-number">0x20</span>;<span class="hljs-comment">//设定定时器1为8位自动重装方式</span><br>TL1 = <span class="hljs-number">0xFD</span>;<span class="hljs-comment">//设定定时初值</span><br>TH1 = <span class="hljs-number">0xFD</span>;<span class="hljs-comment">//设定定时器重装值</span><br>ET1 = <span class="hljs-number">0</span>;<span class="hljs-comment">//禁止定时器1中断</span><br>TR1 = <span class="hljs-number">1</span>;<span class="hljs-comment">//启动定时器1</span><br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART_SendByte</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Byte)</span><br>&#123;<br>SBUF = Byte;<br><span class="hljs-keyword">while</span> (TI == <span class="hljs-number">0</span>)<br>;<br>TI = <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="附：波特率如何计算？"><a href="#附：波特率如何计算？" class="headerlink" title="附：波特率如何计算？"></a>附：波特率如何计算？</h2><p>若给计时器配置为0xF3(243),即每计13个数溢出一次。</p><p>又当使用12Mhz的晶振，在12T模式下，每一微秒记一次数。</p><p>所以，每隔13us溢出一次，溢出的频率即为1&#x2F;13（0.0769230769230769）MHz</p><p>若波特率加倍 就是（0.07692&#x2F;16）MHz &#x3D; 0.00480769MHz &#x3D; 4807.69Hz(约等于4800Hz)，有略微误差。若为11.0582Mhz晶振，可以没有误差。</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51单片机</tag>
      
      <tag>串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>51单片机定时器初步学习</title>
    <link href="/2024/09/03/24_9_3_timer/"/>
    <url>/2024/09/03/24_9_3_timer/</url>
    
    <content type="html"><![CDATA[<h1 id="51单片机定时器"><a href="#51单片机定时器" class="headerlink" title="51单片机定时器"></a>51单片机定时器</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>  定时器属于内部资源，其电路与运转都在单片机内部。（也是一种计数器）</p><h3 id="1-2定时器作用"><a href="#1-2定时器作用" class="headerlink" title="1.2定时器作用"></a>1.2定时器作用</h3><ul><li>用于计时系统，软件计时，以及隔一段时间完成一项操作。</li><li>替代长时间的Delay。</li><li>多个任务同时执行，提高CPU的运行效率和处理速度。</li></ul><h2 id="2-STC89C52的定时器资源"><a href="#2-STC89C52的定时器资源" class="headerlink" title="2.STC89C52的定时器资源"></a>2.STC89C52的定时器资源</h2><ul><li>数量：3个（其他定时器不一定为此数量）</li></ul><h2 id="3-原理"><a href="#3-原理" class="headerlink" title="3.原理"></a>3.原理</h2><p>根据时钟信号，经过一段时间来对寄存器操作（加一），我们通过中断来设定何时进行什么任务。</p><h2 id="4-定时器的工作模式"><a href="#4-定时器的工作模式" class="headerlink" title="4.定时器的工作模式"></a>4.定时器的工作模式</h2><ul><li>模式0：13位定时器&#x2F;计数器（少用）</li><li>模式1：16位定时器&#x2F;计数器（常用）</li><li>模式2：8位自动重装模式（少用）</li><li>模式3：两个8位计数器</li></ul><p><strong>以下只讲解模式1</strong></p><p>定时器分为3个部分：</p><ul><li>时钟</li><li>计数器</li><li>中断</li></ul><h3 id="4-1如何计数？"><a href="#4-1如何计数？" class="headerlink" title="4.1如何计数？"></a>4.1如何计数？</h3><p>模式一中计数器由两个8位寄存器组成（最大数即为65535），时钟信号每一个脉冲加1，当加到65535（准确说是65536）时溢出，变为0（此时将申请中断）。</p><h3 id="4-2时钟"><a href="#4-2时钟" class="headerlink" title="4.2时钟"></a>4.2时钟</h3><p>本开发板的晶振为11.0592MHz，但是时钟信号可以由外部引脚（如T0），此时可以作为计数器（一个脉冲+1），若由芯片内部时钟，此时即为计数器。</p><p>时钟信号进入单片机之后，会进行分频（除以12或是除以6？，如果是12Mhz除以12，那么一个周期就是1us）</p><h3 id="4-3中断系统"><a href="#4-3中断系统" class="headerlink" title="4.3中断系统"></a>4.3中断系统</h3><ul><li>中断系统是为cpu具有紧急事件的实时处理能力而设置的。</li><li>当cpu在执行任务时有紧急任务需要处理时，cpu可以暂停转而去处理这个紧急事件，然后再返回到原来被中断的地方，这就是中断系统。</li><li>cpu可以有多个中断源，我们可以为不同中断源设置优先级，cpu总是会首先处理优先级最高的任务（若已经在优先级较低的中断处理中，会停止处理，转而优先级高的中断源（即中断嵌套）。）</li></ul><h4 id="中断系统的资源"><a href="#中断系统的资源" class="headerlink" title="中断系统的资源"></a>中断系统的资源</h4><p>不同系统具有不同的中断资源如：中断源个数不同、中断源优先级不同等。</p><p>89C52单片机中断资源如下：</p><ul><li>中断源个数：8个</li><li>中断优先级个数：4个</li><li>中断号如下表<table><thead><tr><th align="center">序号</th><th>中断源</th></tr></thead><tbody><tr><td align="center">0</td><td>外部中断0</td></tr><tr><td align="center">1</td><td>定时器0</td></tr><tr><td align="center">2</td><td>外部中断1</td></tr><tr><td align="center">3</td><td>定时器1</td></tr><tr><td align="center">4</td><td>串口中断</td></tr><tr><td align="center">5</td><td>定时器2</td></tr><tr><td align="center">6</td><td>外部中断2</td></tr><tr><td align="center">7</td><td>外部中断3</td></tr></tbody></table></li></ul><p>中断函数写法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">Int0_Routine</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> interrupt 0;<br></code></pre></td></tr></table></figure><p>中断优先级，查看手册，或者以此图为参考（51单片机向下兼容，此图也计时器与中断系统的结合）</p><p><img src="https://s3.bmp.ovh/imgs/2024/09/03/025f4f5d25e7b445.png"></p><h2 id="5-配置"><a href="#5-配置" class="headerlink" title="5.配置"></a>5.配置</h2><p>了解完基本原理，剩下的即为配置寄存器。<br>此图为定时器的寄存器<br><img src="https://s3.bmp.ovh/imgs/2024/09/03/e6d8a2becf9799c8.png"></p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>51单片机</tag>
      
      <tag>定时器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指针初步学习</title>
    <link href="/2024/08/25/note/"/>
    <url>/2024/08/25/note/</url>
    
    <content type="html"><![CDATA[<h1 id="指针初步学习"><a href="#指针初步学习" class="headerlink" title="指针初步学习"></a>指针初步学习</h1><h2 id="1-指针是什么？"><a href="#1-指针是什么？" class="headerlink" title="1.指针是什么？"></a>1.指针是什么？</h2><p>电脑内存这么大我们怎么管理？<br>于是我们创造了指针。</p><ul><li>指针是内存最小单位的一个地址</li></ul><p>假设以下一格为一个字节（Byte）<br>类比为房间，如何才能找到每个房间，于是就进行编号。</p><table><thead><tr><th align="right">编号</th><th align="center">内存单元</th></tr></thead><tbody><tr><td align="right">1</td><td align="center"></td></tr><tr><td align="right">2</td><td align="center"></td></tr><tr><td align="right">3</td><td align="center"></td></tr><tr><td align="right">…</td><td align="center">…</td></tr></tbody></table><p>这个编号为内存地址，即为指针。</p><p>假设我们要对<code>int a</code>取地址，<code>int</code>大小为4个字节，C语言就会取出第一个字节的地址。</p><p>如：</p><table><thead><tr><th align="right">编号(本质为二进制但是用16进制展示)</th><th align="center">内存单元</th></tr></thead><tbody><tr><td align="right">0x00dbfd98</td><td align="center">a</td></tr><tr><td align="right">0x00dbfd99</td><td align="center">a</td></tr><tr><td align="right">0x00dbfd9a</td><td align="center">a</td></tr><tr><td align="right">0x00dbfd9b</td><td align="center">a</td></tr></tbody></table><p>此处<code>&amp;a = 0x00dbfd98</code>。</p><p><strong>但是注意</strong>：我们在口头中所说指针一般为C语言的指针变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span>* pa = &amp;a;<br><span class="hljs-comment">//一般我们在这里就把pa这个指针变量说成指针</span><br><span class="hljs-comment">//本文中我会区分指针与指针变量。</span><br></code></pre></td></tr></table></figure><p>在不同的机器上，指针长度不同，32位即32bit，能管理4GB的内存（二进制：11111111 11111111 11111111 11111111），所以在32位机器上一个指针变量大小为4字节。</p><h2 id="2-指针和指针类型"><a href="#2-指针和指针类型" class="headerlink" title="2.指针和指针类型"></a>2.指针和指针类型</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span>*   pc = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">short</span>*  ps = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">int</span>*    pi = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">double</span>* pd = <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>这些不同类型的指针变量在32位下都是4个字节,<br>那么为什么要区分这些不同类型的指针呢？</p><h3 id="2-1指针类型的意义"><a href="#2-1指针类型的意义" class="headerlink" title="2.1指针类型的意义"></a>2.1指针类型的意义</h3><p><strong>举例1：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">0x11223344</span>;<br><span class="hljs-type">char</span>* pc = (<span class="hljs-type">char</span>*)&amp;a;<br>*pc = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>此时a被修改为了0x11223300。  </p><p>所以指针类型决定了指针在被解引用时访问几个字节，如果是<code>char*</code>在解引用是访问1个字节，导致了例子中的情况。</p><p><strong>举例2：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>   a = <span class="hljs-number">0x11223344</span>;<br><br><span class="hljs-type">char</span>* pc = (<span class="hljs-type">char</span>*)&amp;a;<br><span class="hljs-type">int</span>*  pi = &amp;a;<br><br>pc+<span class="hljs-number">1</span>;<span class="hljs-comment">//这里加1会给地址加1个字节</span><br>pi+<span class="hljs-number">1</span>;<span class="hljs-comment">//这里加1会给地址加4个字节</span><br></code></pre></td></tr></table></figure><p>即根据指针变量类型的不同进行地址的操作。</p><p>那么<code>int*</code>与<code>float*</code>可以通用吗？<br>显然不可以，在解引用时对于内存的操作仍是不同的。</p><h2 id="3-野指针"><a href="#3-野指针" class="headerlink" title="3.野指针"></a>3.野指针</h2><h3 id="3-1什么是野指针？"><a href="#3-1什么是野指针？" class="headerlink" title="3.1什么是野指针？"></a>3.1什么是野指针？</h3><p><strong>定义：指针指向的位置是不可知的。</strong></p><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span>* p ;<br>*p = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>此处p没有初始化，意味着没有明确的指向（即不初始化放的是随机值）这里的p就是野指针。</p><p>此外还有：  </p><ul><li>指针越界访问（如访问超出数组长度的地址）</li><li>指针指向的空间释放（如函数返回一个指针后被销毁）</li></ul><h3 id="3-2如何避免野指针的出现。"><a href="#3-2如何避免野指针的出现。" class="headerlink" title="3.2如何避免野指针的出现。"></a>3.2如何避免野指针的出现。</h3><ul><li>对指针明确初始化（或初始化为<code>NULL</code>，但此时无法解引用）。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//以下为一种安全的初始化方式：</span><br><span class="hljs-type">int</span>* p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span> (p3 != <span class="hljs-literal">NULL</span>)<br>&#123;<br>    *p3 = <span class="hljs-number">100</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>避免越界</li><li>避免局部变量的指针</li><li>使用前检查指针的有效性</li></ul><h2 id="4-指针运算"><a href="#4-指针运算" class="headerlink" title="4.指针运算"></a>4.指针运算</h2><h3 id="4-1指针-整数"><a href="#4-1指针-整数" class="headerlink" title="4.1指针+-整数"></a>4.1指针+-整数</h3><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N_VALUES 5</span><br><span class="hljs-type">float</span> values[N_VALUES];<br><span class="hljs-type">float</span> *vp;<br><span class="hljs-keyword">for</span>(vp = &amp;values[<span class="hljs-number">0</span>]; vp &lt; &amp;values[N_VALUES];)<br>&#123;<br>    *vp++;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：此处<code>*vp++</code>拆分为<code>*vp;</code>和<code>vp++;</code></p><h3 id="4-2指针-指针"><a href="#4-2指针-指针" class="headerlink" title="4.2指针-指针"></a>4.2指针-指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,&amp;arr[<span class="hljs-number">9</span>] - &amp;arr[<span class="hljs-number">0</span>]);<br><span class="hljs-comment">//结果为9</span><br></code></pre></td></tr></table></figure><p>指针减去指针得到的是指针之间元素的个数。但不是所有的指针都能相减，只有指向同一块空间的指针才能相减，才有意义。</p><h4 id="4-2-1用法"><a href="#4-2-1用法" class="headerlink" title="4.2.1用法"></a>4.2.1用法</h4><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">my_strlen</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span><br>&#123;<br>    <span class="hljs-type">char</span>* start = str;<br>    <span class="hljs-keyword">while</span> (*str != <span class="hljs-string">&#x27;\0&#x27;</span>)<br>    &#123;<br>        str++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (str - start);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> len = my_strlen(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>但是有没有指针+指针呢？<br>有，但是无意义。类比于生活中的日期加日期，无意义。</p><h3 id="4-3指针的关系运算"><a href="#4-3指针的关系运算" class="headerlink" title="4.3指针的关系运算"></a>4.3指针的关系运算</h3><ul><li>其实就是比较大小</li></ul><p>举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N_VALUES 5</span><br><span class="hljs-type">float</span> values[N_VALUES];<br><span class="hljs-type">float</span> *vp;<br><span class="hljs-keyword">for</span>(vp = &amp;values[N_VALUES<span class="hljs-number">-1</span>]; vp &gt;= &amp;values[<span class="hljs-number">0</span>];vp--)<br>&#123;<br>    *vp = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码可以通过编译，但是标准不规定其可行，因为<code>N_VALUES-1</code>访问了数组前的内存是不推荐的（但是可以访问数组后，即数组越界只允许往后越界）。</p><h2 id="5-指针与数组"><a href="#5-指针与数组" class="headerlink" title="5.指针与数组"></a>5.指针与数组</h2><ul><li>数组是一组相同类型元素的集合</li><li>指针变量是一个变量，存放的是地址</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span>* p =arr;<br>    <span class="hljs-comment">//p为首元素地址</span><br>    <span class="hljs-comment">//联系就是数组名</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>好久不见。</title>
    <link href="/2024/08/23/hello-world/"/>
    <url>/2024/08/23/hello-world/</url>
    
    <content type="html"><![CDATA[<figure><img src="https://s3.bmp.ovh/imgs/2023/01/28/f910bfe1af04d2a8.jpg"alt="星空" /><figcaption aria-hidden="true">星空</figcaption></figure><h2 id="好久不见">好久不见！</h2><p>回顾一下我的博客历史：</p><h3 id="一阶段">一阶段</h3><p>自第一次创建“博客”来，已过去了4年，至今还记得亲手写下第一个html标签时的心潮澎湃。</p><p>但我不满足于区区html，便又在网上寻觅，便遇见了wordpress，第一次搭建了php环境，被其强大的交互能力折服，那时还不知道什么前端后端，只知道，wordpress好强大。</p><p>没有公网主机的我用一台笔记本内网穿透，域名解析，强制让它7x24小时运行（哈哈</p><p>最终还是抵不过运维的压力（滑稽，其实是懒得搞了</p><h3 id="二阶段">二阶段</h3><p>小屁孩终究还是敌不过想要一个自己的网站的欲望，却又想白嫖。我便去找能够使用的免费的服务器（小水管）部署了typecho（简洁好用）。但是，白嫖的总是不稳定，没多久便又挂了。</p><h3 id="现阶段">现阶段</h3><p>现在，我部署了hexo生成静态页面上传至GitHub，作为我第三阶段（或许是最终阶段）博客的开始，同时也是人生的一个新阶段，我想我会尽力记录我的学习经验，毕竟，再怎么漂亮的博客页面，比不上丰硕的博客内容。</p><p>放首歌：</p><iframe allow="autoplay *; encrypted-media *;" frameborder="0" height="150" style="width:100%;max-width:660px;overflow:hidden;background:transparent;" sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-storage-access-by-user-activation allow-top-navigation-by-user-activation" src="https://embed.music.apple.com/cn/album/e-t-a/1496639180?i=1496639770"></iframe>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
